{"remainingRequest":"/Users/xujunjie/Documents/git/projectComponent/node_modules/thread-loader/dist/cjs.js??ref--11-1!/Users/xujunjie/Documents/git/projectComponent/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--11-2!/Users/xujunjie/Documents/git/projectComponent/node_modules/source-map-loader/index.js!/Users/xujunjie/Documents/git/projectComponent/src/limitUpload/LimitUpload.tsx","dependencies":[{"path":"/Users/xujunjie/Documents/git/projectComponent/src/limitUpload/LimitUpload.tsx","mtime":1611495183479},{"path":"/Users/xujunjie/Documents/git/projectComponent/node_modules/cache-loader/dist/cjs.js","mtime":1609062632110},{"path":"/Users/xujunjie/Documents/git/projectComponent/node_modules/thread-loader/dist/cjs.js","mtime":1609062632658},{"path":"/Users/xujunjie/Documents/git/projectComponent/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1609062558293},{"path":"/Users/xujunjie/Documents/git/projectComponent/node_modules/source-map-loader/index.js","mtime":1609062632650}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ImFudGQvZXMvdXBsb2FkL3N0eWxlL2NzcyI7aW1wb3J0IF9VcGxvYWQgZnJvbSJhbnRkL2VzL3VwbG9hZCI7aW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSIvVXNlcnMveHVqdW5qaWUvRG9jdW1lbnRzL2dpdC9wcm9qZWN0Q29tcG9uZW50L25vZGVfbW9kdWxlcy9iYWJlbC1wcmVzZXQtcmVhY3QtYXBwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyIjtpbXBvcnQiYW50ZC9lcy9tZXNzYWdlL3N0eWxlL2NzcyI7aW1wb3J0IF9tZXNzYWdlIGZyb20iYW50ZC9lcy9tZXNzYWdlIjtpbXBvcnQiYW50ZC9lcy9idXR0b24vc3R5bGUvY3NzIjtpbXBvcnQgX0J1dHRvbiBmcm9tImFudGQvZXMvYnV0dG9uIjtpbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20iL1VzZXJzL3h1anVuamllL0RvY3VtZW50cy9naXQvcHJvamVjdENvbXBvbmVudC9ub2RlX21vZHVsZXMvYmFiZWwtcHJlc2V0LXJlYWN0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2siO2ltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSIvVXNlcnMveHVqdW5qaWUvRG9jdW1lbnRzL2dpdC9wcm9qZWN0Q29tcG9uZW50L25vZGVfbW9kdWxlcy9iYWJlbC1wcmVzZXQtcmVhY3QtYXBwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcyI7aW1wb3J0IF9pbmhlcml0cyBmcm9tIi9Vc2Vycy94dWp1bmppZS9Eb2N1bWVudHMvZ2l0L3Byb2plY3RDb21wb25lbnQvbm9kZV9tb2R1bGVzL2JhYmVsLXByZXNldC1yZWFjdC1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzIjtpbXBvcnQgX2NyZWF0ZVN1cGVyIGZyb20iL1VzZXJzL3h1anVuamllL0RvY3VtZW50cy9naXQvcHJvamVjdENvbXBvbmVudC9ub2RlX21vZHVsZXMvYmFiZWwtcHJlc2V0LXJlYWN0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlU3VwZXIiO2ltcG9ydHtMb2FkaW5nT3V0bGluZWQsUGx1c091dGxpbmVkLFVwbG9hZE91dGxpbmVkfWZyb20nQGFudC1kZXNpZ24vaWNvbnMnO2ltcG9ydCBSZWFjdCx7Q29tcG9uZW50fWZyb20ncmVhY3QnO2ltcG9ydCBVcGxvYWRBY2NlcHRUeXBlIGZyb20nLi4vZW51bXMvVXBsb2FkQWNjZXB0VHlwZSc7aW1wb3J0IFVwbG9hZFR5cGUgZnJvbScuLi9lbnVtcy9VcGxvYWRUeXBlJzt2YXIgTGltaXRVcGxvYWQ9LyojX19QVVJFX18qL2Z1bmN0aW9uKF9Db21wb25lbnQpe19pbmhlcml0cyhMaW1pdFVwbG9hZCxfQ29tcG9uZW50KTt2YXIgX3N1cGVyPV9jcmVhdGVTdXBlcihMaW1pdFVwbG9hZCk7ZnVuY3Rpb24gTGltaXRVcGxvYWQocHJvcHMpe3ZhciBfdGhpcztfY2xhc3NDYWxsQ2hlY2sodGhpcyxMaW1pdFVwbG9hZCk7X3RoaXM9X3N1cGVyLmNhbGwodGhpcyxwcm9wcyk7X3RoaXMub25DaGFuZ2U9ZnVuY3Rpb24oaW5mbyl7dmFyIHZhbGlkYXRlRmlsZT1fdGhpcy5wcm9wcy52YWxpZGF0ZUZpbGU7Ly8gdGhpcy5zZXRTdGF0ZSh7IGZpbGVMaXN0OiBpbmZvLmZpbGVMaXN0IH0pOwppZighdmFsaWRhdGVGaWxlKXt0aHJvdyBuZXcgRXJyb3IoJ25lZWQgdmFsaWRhdGVGaWxlJyk7fXZhciBsb2FkaW5nPWZhbHNlO3ZhciBmaWxlPWluZm8uZmlsZTt2YXIgZmlsZUxpc3Q9aW5mby5maWxlTGlzdDtzd2l0Y2goZmlsZS5zdGF0dXMpe2Nhc2UnZG9uZSc6dmFyIHN1Y2Nlc3M9dmFsaWRhdGVGaWxlKGZpbGUpO2lmKHN1Y2Nlc3Mpe190aGlzLnZhbGlkYXRlRmlsZUxpc3QoZmlsZUxpc3QpO31lbHNle190aGlzLm9uRXJyb3IoZmlsZSk7fWJyZWFrO2Nhc2UndXBsb2FkaW5nJzpsb2FkaW5nPXRydWU7YnJlYWs7Y2FzZSdlcnJvcic6X3RoaXMudmFsaWRhdGVGaWxlTGlzdChmaWxlTGlzdCk7X3RoaXMub25FcnJvcihmaWxlKTticmVhaztjYXNlJ3JlbW92ZWQnOl90aGlzLnZhbGlkYXRlRmlsZUxpc3QoZmlsZUxpc3QpO2JyZWFrO2RlZmF1bHQ6YnJlYWs7fWlmKGxvYWRpbmchPT1fdGhpcy5zdGF0ZS5sb2FkaW5nKXtfdGhpcy5zZXRTdGF0ZSh7bG9hZGluZzpsb2FkaW5nfSk7fX07dmFyIGRlZmF1bHRGaWxlTGlzdD1wcm9wcy5kZWZhdWx0RmlsZUxpc3QsdmFsdWU9cHJvcHMudmFsdWU7X3RoaXMuc3RhdGU9e2xvYWRpbmc6ZmFsc2UsZmlsZUxpc3Q6dmFsdWV8fGRlZmF1bHRGaWxlTGlzdHx8W119O3JldHVybiBfdGhpczt9X2NyZWF0ZUNsYXNzKExpbWl0VXBsb2FkLFt7a2V5OiJjb21wb25lbnREaWRVcGRhdGUiLHZhbHVlOmZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpe2lmKCd2YWx1ZSdpbiB0aGlzLnByb3BzKXt2YXIgX3ZhbHVlPXRoaXMucHJvcHMudmFsdWU7dmFyIGZpbGVMaXN0PXRoaXMuc3RhdGUuZmlsZUxpc3Q7Ly8g5aaC5p6c5pyJ5YC877yM5LiU5LiN55u45ZCM77yM6LWL5YC877ybCi8vIOWmguaenOaXoOWAvO+8jOS9huaYr3N0YXRl5pyJ5YC877yM5riF6Zmkc3RhdGXnmoTlgLwKaWYoX3ZhbHVlKXtpZihfdmFsdWUhPT1maWxlTGlzdCl7dGhpcy5zZXRTdGF0ZSh7ZmlsZUxpc3Q6X3ZhbHVlfSk7fX1lbHNlIGlmKGZpbGVMaXN0JiZmaWxlTGlzdC5sZW5ndGgpe3RoaXMuc2V0U3RhdGUoe2ZpbGVMaXN0OltdfSk7fX19fSx7a2V5OiJnZXRBY2NlcHQiLHZhbHVlOmZ1bmN0aW9uIGdldEFjY2VwdCgpe3ZhciBfdGhpcyRwcm9wcz10aGlzLnByb3BzLGFjY2VwdD1fdGhpcyRwcm9wcy5hY2NlcHQsdHlwZT1fdGhpcyRwcm9wcy50eXBlO2lmKGFjY2VwdD09PXVuZGVmaW5lZCl7c3dpdGNoKHR5cGUpe2Nhc2UgVXBsb2FkVHlwZS5JTUFHRTpyZXR1cm4gVXBsb2FkQWNjZXB0VHlwZS5JTUFHRTtkZWZhdWx0OnJldHVybicnO319cmV0dXJuIGFjY2VwdDt9fSx7a2V5OiJyZW5kZXJDaG9vc2VlciIsdmFsdWU6ZnVuY3Rpb24gcmVuZGVyQ2hvb3NlZXIoKXt2YXIgX3RoaXMkc3RhdGU9dGhpcy5zdGF0ZSxsb2FkaW5nPV90aGlzJHN0YXRlLmxvYWRpbmcsZmlsZUxpc3Q9X3RoaXMkc3RhdGUuZmlsZUxpc3Q7dmFyIF90aGlzJHByb3BzMj10aGlzLnByb3BzLG1heE51bWJlcj1fdGhpcyRwcm9wczIubWF4TnVtYmVyLHJlbmRlckNob29zZXI9X3RoaXMkcHJvcHMyLnJlbmRlckNob29zZXIsdHlwZT1fdGhpcyRwcm9wczIudHlwZSxkaXNhYmxlZD1fdGhpcyRwcm9wczIuZGlzYWJsZWQ7dmFyIGZpbGVOdW1iZXI9ZmlsZUxpc3QubGVuZ3RoO3ZhciBjaG9vc2VFbmFibGU9IW1heE51bWJlcnx8ZmlsZU51bWJlcjxtYXhOdW1iZXI7aWYoIWNob29zZUVuYWJsZSl7cmV0dXJuIG51bGw7fWlmKHJlbmRlckNob29zZXIpe3JldHVybiByZW5kZXJDaG9vc2VyKGxvYWRpbmcpO31zd2l0Y2godHlwZSl7Y2FzZSBVcGxvYWRUeXBlLklNQUdFOnJldHVybi8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KCJkaXYiLG51bGwsbG9hZGluZz8vKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChMb2FkaW5nT3V0bGluZWQsbnVsbCk6LyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUGx1c091dGxpbmVkLG51bGwpLC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KCJkaXYiLHtjbGFzc05hbWU6ImFudC11cGxvYWQtdGV4dCJ9LCJcdTRFMEFcdTRGMjAiKSk7ZGVmYXVsdDpyZXR1cm4vKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChfQnV0dG9uLHtsb2FkaW5nOmxvYWRpbmcsZGlzYWJsZWQ6ZGlzYWJsZWQsaWNvbjovKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChVcGxvYWRPdXRsaW5lZCxudWxsKX0sIlx1NEUwQVx1NEYyMCIpO319fSx7a2V5OiJvbkVycm9yIix2YWx1ZTpmdW5jdGlvbiBvbkVycm9yKGZpbGUpe3ZhciBvbkVycm9yPXRoaXMucHJvcHMub25FcnJvcjtpZihvbkVycm9yKXtvbkVycm9yKGZpbGUpO31lbHNle19tZXNzYWdlLmVycm9yKCIiLmNvbmNhdChmaWxlLm5hbWUsIlx1NEUwQVx1NEYyMFx1NTkzMVx1OEQyNSIpKTt9fX0se2tleToidmFsaWRhdGVGaWxlTGlzdCIsdmFsdWU6ZnVuY3Rpb24gdmFsaWRhdGVGaWxlTGlzdChmaWxlTGlzdCl7dmFyIF90aGlzJHByb3BzMz10aGlzLnByb3BzLHZhbGlkYXRlRmlsZT1fdGhpcyRwcm9wczMudmFsaWRhdGVGaWxlLG9uQ2hhbmdlPV90aGlzJHByb3BzMy5vbkNoYW5nZTtpZighdmFsaWRhdGVGaWxlKXt0aHJvdyBuZXcgRXJyb3IoJ25lZWQgdmFsaWRhdGVGaWxlJyk7fXZhciBuZXdGaWxlTGlzdD1maWxlTGlzdC5maWx0ZXIoZnVuY3Rpb24oZmlsZSl7cmV0dXJuIHZhbGlkYXRlRmlsZShmaWxlKTt9KTt0aGlzLnNldFN0YXRlKHtmaWxlTGlzdDpuZXdGaWxlTGlzdH0sZnVuY3Rpb24oKXtpZihvbkNoYW5nZSl7b25DaGFuZ2UobmV3RmlsZUxpc3QpO319KTt9fSx7a2V5OiJyZW5kZXIiLHZhbHVlOmZ1bmN0aW9uIHJlbmRlcigpe3ZhciBfdGhpcyRwcm9wczQ9dGhpcy5wcm9wcyx0eXBlPV90aGlzJHByb3BzNC50eXBlLGRpc2FibGVkPV90aGlzJHByb3BzNC5kaXNhYmxlZCxhY3Rpb249X3RoaXMkcHJvcHM0LmFjdGlvbix1cGxvYWRQcm9wcz1fdGhpcyRwcm9wczQudXBsb2FkUHJvcHMsZGlzYWJsZUNyZWRlbnRpYWxzPV90aGlzJHByb3BzNC5kaXNhYmxlQ3JlZGVudGlhbHM7dmFyIGZpbGVMaXN0PXRoaXMuc3RhdGUuZmlsZUxpc3Q7dmFyIHByb3BzPV9vYmplY3RTcHJlYWQoe2ZpbGVMaXN0OmZpbGVMaXN0LGRpc2FibGVkOmRpc2FibGVkLGFjY2VwdDp0aGlzLmdldEFjY2VwdCgpLGFjdGlvbjphY3Rpb24sd2l0aENyZWRlbnRpYWxzOiFkaXNhYmxlQ3JlZGVudGlhbHMsb25DaGFuZ2U6dGhpcy5vbkNoYW5nZSxsaXN0VHlwZTp0eXBlPT09VXBsb2FkVHlwZS5JTUFHRT8ncGljdHVyZS1jYXJkJzondGV4dCd9LHVwbG9hZFByb3BzKTtzd2l0Y2godHlwZSl7Y2FzZSBVcGxvYWRUeXBlLklNQUdFOnJldHVybi8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KF9VcGxvYWQsT2JqZWN0LmFzc2lnbih7fSxwcm9wcyx7bGlzdFR5cGU6InBpY3R1cmUtY2FyZCJ9KSx0aGlzLnJlbmRlckNob29zZWVyKCkpO2RlZmF1bHQ6cmV0dXJuLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX1VwbG9hZCxwcm9wcyx0aGlzLnJlbmRlckNob29zZWVyKCkpO319fV0pO3JldHVybiBMaW1pdFVwbG9hZDt9KENvbXBvbmVudCk7ZXhwb3J0IGRlZmF1bHQgTGltaXRVcGxvYWQ7aWYodHlwZW9mIExpbWl0VXBsb2FkIT09J3VuZGVmaW5lZCcmJkxpbWl0VXBsb2FkJiZMaW1pdFVwbG9hZD09PU9iamVjdChMaW1pdFVwbG9hZCkmJk9iamVjdC5pc0V4dGVuc2libGUoTGltaXRVcGxvYWQpKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoTGltaXRVcGxvYWQsJ19fZmlsZW1ldGEnLHtlbnVtZXJhYmxlOnRydWUsY29uZmlndXJhYmxlOnRydWUsdmFsdWU6e25hbWU6IkxpbWl0VXBsb2FkIixmaWxlbmFtZToic3JjL2xpbWl0VXBsb2FkL0xpbWl0VXBsb2FkLnRzeCJ9fSk7fQ=="},{"version":3,"sources":["/Users/xujunjie/Documents/git/projectComponent/src/limitUpload/LimitUpload.tsx"],"names":["LoadingOutlined","PlusOutlined","UploadOutlined","React","Component","UploadAcceptType","UploadType","LimitUpload","props","onChange","info","validateFile","Error","loading","file","fileList","status","success","validateFileList","onError","state","setState","defaultFileList","value","length","accept","type","undefined","IMAGE","maxNumber","renderChooser","disabled","fileNumber","chooseEnable","error","name","newFileList","filter","action","uploadProps","disableCredentials","getAccept","withCredentials","listType","renderChooseer"],"mappings":"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","sourcesContent":["import { LoadingOutlined, PlusOutlined, UploadOutlined } from '@ant-design/icons';\nimport { Button, message, Upload } from 'antd';\nimport { UploadChangeParam } from 'antd/lib/upload';\nimport { UploadFile, UploadProps } from 'antd/lib/upload/interface';\nimport React, { Component, ReactNode } from 'react';\nimport UploadAcceptType from '../enums/UploadAcceptType';\nimport UploadType from '../enums/UploadType';\nimport IComponentProps from '../interfaces/IComponentProps';\n\ninterface ILimitUploadState {\n  loading: boolean;\n  fileList: UploadFile<any>[];\n}\ninterface ILimitUploadProps extends IComponentProps {\n  /**\n   * 验证文件是否上传成功。\n   *\n   * @return 返回是否上传成功\n   */\n  validateFile?: (file: UploadFile<any>) => boolean;\n\n  /**\n   * 上传出错的处理函数，不传则使用默认处理方法：message.error()显示错误提示\n   */\n  onError?: (file: UploadFile<any>) => void;\n\n  /**\n   * 最大允许上传的文件数量\n   */\n  maxNumber?: number;\n\n  /**\n   * 类型，是普通文件还是图像\n   *\n   * @see UploadType\n   */\n  type?: UploadType;\n\n  /**\n   * 是否禁用\n   */\n  disabled?: boolean;\n\n  /**\n   * 文件发生变化时触发的事件\n   */\n  onChange?: (value: UploadFile<any>[]) => void;\n\n  /**\n   * 默认的文件列表。\n   *\n   * 通常在编辑时，需要使用，例如：之前上传过的文件，可使用此属性设置\n   */\n  defaultFileList?: UploadFile<any>[];\n\n  /**\n   * 文件列表\n   */\n  value?: UploadFile<any>[];\n\n  /**\n   * 选择元素的渲染函数，如果没有，使用默认方案\n   */\n  renderChooser?: (loading?: boolean) => ReactNode;\n\n  /**\n   * 可选的文件后缀。\n   *\n   * 不设置，则根据type自动设置\n   *\n   * @example \".jpg, .png\"\n   */\n  accept?: string | UploadAcceptType;\n\n  /**\n   * 上传接口路径\n   */\n  action?: string;\n\n  /**\n   * 是否禁用cookie\n   */\n  disableCredentials?: boolean;\n\n  /**\n   * 其它要传给Upload的props，此属性的优先级高于其它属性。\n   *\n   * 例如：在此属性设置了accept，则优先使用此处设置的accept\n   */\n  uploadProps?: UploadProps;\n}\n\nclass LimitUpload extends Component<ILimitUploadProps, ILimitUploadState> {\n  constructor(props: ILimitUploadProps) {\n    super(props);\n    const { defaultFileList, value } = props;\n    this.state = {\n      loading: false,\n      fileList: value || defaultFileList || [],\n    };\n  }\n\n  public componentDidUpdate() {\n    if ('value' in this.props) {\n      const value = this.props.value;\n      const { fileList } = this.state;\n      // 如果有值，且不相同，赋值；\n      // 如果无值，但是state有值，清除state的值\n      if (value) {\n        if (value !== fileList) {\n          this.setState({ fileList: value });\n        }\n      } else if (fileList && fileList.length) {\n        this.setState({ fileList: [] });\n      }\n    }\n  }\n\n  private getAccept() {\n    const { accept, type } = this.props;\n    if (accept === undefined) {\n      switch (type) {\n        case UploadType.IMAGE:\n          return UploadAcceptType.IMAGE;\n        default:\n          return '';\n      }\n    }\n    return accept;\n  }\n\n  private renderChooseer() {\n    const { loading, fileList } = this.state;\n    const { maxNumber, renderChooser, type, disabled } = this.props;\n\n    const fileNumber = fileList.length;\n    const chooseEnable = !maxNumber || fileNumber < maxNumber;\n    if (!chooseEnable) {\n      return null;\n    }\n\n    if (renderChooser) {\n      return renderChooser(loading);\n    }\n\n    switch (type) {\n      case UploadType.IMAGE:\n        return (\n          <div>\n            {loading ? <LoadingOutlined /> : <PlusOutlined />}\n            <div className=\"ant-upload-text\">上传</div>\n          </div>\n        );\n      default:\n        return (\n          <Button loading={loading} disabled={disabled} icon={<UploadOutlined />}>\n            上传\n          </Button>\n        );\n    }\n  }\n\n  private onChange = (info: UploadChangeParam<UploadFile<any>>) => {\n    const { validateFile } = this.props;\n    // this.setState({ fileList: info.fileList });\n    if (!validateFile) {\n      throw new Error('need validateFile');\n    }\n    let loading = false;\n    const file = info.file;\n\n    const fileList = info.fileList;\n\n    switch (file.status) {\n      case 'done':\n        const success = validateFile(file);\n        if (success) {\n          this.validateFileList(fileList);\n        } else {\n          this.onError(file);\n        }\n        break;\n      case 'uploading':\n        loading = true;\n        break;\n      case 'error':\n        this.validateFileList(fileList);\n        this.onError(file);\n        break;\n      case 'removed':\n        this.validateFileList(fileList);\n        break;\n      default:\n        break;\n    }\n\n    if (loading !== this.state.loading) {\n      this.setState({ loading });\n    }\n  };\n\n  private onError(file: UploadFile<any>) {\n    const { onError } = this.props;\n    if (onError) {\n      onError(file);\n    } else {\n      message.error(`${file.name}上传失败`);\n    }\n  }\n\n  private validateFileList(fileList: UploadFile<any>[]) {\n    const { validateFile, onChange } = this.props;\n    if (!validateFile) {\n      throw new Error('need validateFile');\n    }\n    const newFileList = fileList.filter(file => {\n      return validateFile(file);\n    });\n    this.setState({ fileList: newFileList }, () => {\n      if (onChange) {\n        onChange(newFileList);\n      }\n    });\n  }\n\n  public render(): ReactNode {\n    const { type, disabled, action, uploadProps, disableCredentials } = this.props;\n    const { fileList } = this.state;\n    const props: UploadProps = {\n      fileList,\n      disabled,\n      accept: this.getAccept(),\n      action,\n      withCredentials: !disableCredentials,\n      onChange: this.onChange,\n      listType: type === UploadType.IMAGE ? 'picture-card' : 'text',\n      ...uploadProps,\n    };\n\n    switch (type) {\n      case UploadType.IMAGE:\n        return (\n          <Upload {...props} listType=\"picture-card\">\n            {this.renderChooseer()}\n          </Upload>\n        );\n      default:\n        return <Upload {...props}>{this.renderChooseer()}</Upload>;\n    }\n  }\n}\n\nexport default LimitUpload;\n"]}]}