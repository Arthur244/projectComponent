{"remainingRequest":"/Users/xujunjie/Documents/git/projectComponent/node_modules/thread-loader/dist/cjs.js??ref--11-1!/Users/xujunjie/Documents/git/projectComponent/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--11-2!/Users/xujunjie/Documents/git/projectComponent/node_modules/source-map-loader/index.js!/Users/xujunjie/Documents/git/projectComponent/src/limitUpload/LimitUpload.tsx","dependencies":[{"path":"/Users/xujunjie/Documents/git/projectComponent/src/limitUpload/LimitUpload.tsx","mtime":1611495183479},{"path":"/Users/xujunjie/Documents/git/projectComponent/node_modules/cache-loader/dist/cjs.js","mtime":1609062632110},{"path":"/Users/xujunjie/Documents/git/projectComponent/node_modules/thread-loader/dist/cjs.js","mtime":1609062632658},{"path":"/Users/xujunjie/Documents/git/projectComponent/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1609062558293},{"path":"/Users/xujunjie/Documents/git/projectComponent/node_modules/source-map-loader/index.js","mtime":1609062632650}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJhbnRkL2VzL3VwbG9hZC9zdHlsZS9jc3MiOwppbXBvcnQgX1VwbG9hZCBmcm9tICJhbnRkL2VzL3VwbG9hZCI7CmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gIi9Vc2Vycy94dWp1bmppZS9Eb2N1bWVudHMvZ2l0L3Byb2plY3RDb21wb25lbnQvbm9kZV9tb2R1bGVzL2JhYmVsLXByZXNldC1yZWFjdC1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDIiOwppbXBvcnQgImFudGQvZXMvbWVzc2FnZS9zdHlsZS9jc3MiOwppbXBvcnQgX21lc3NhZ2UgZnJvbSAiYW50ZC9lcy9tZXNzYWdlIjsKaW1wb3J0ICJhbnRkL2VzL2J1dHRvbi9zdHlsZS9jc3MiOwppbXBvcnQgX0J1dHRvbiBmcm9tICJhbnRkL2VzL2J1dHRvbiI7CmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAiL1VzZXJzL3h1anVuamllL0RvY3VtZW50cy9naXQvcHJvamVjdENvbXBvbmVudC9ub2RlX21vZHVsZXMvYmFiZWwtcHJlc2V0LXJlYWN0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2siOwppbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gIi9Vc2Vycy94dWp1bmppZS9Eb2N1bWVudHMvZ2l0L3Byb2plY3RDb21wb25lbnQvbm9kZV9tb2R1bGVzL2JhYmVsLXByZXNldC1yZWFjdC1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzIjsKaW1wb3J0IF9pbmhlcml0cyBmcm9tICIvVXNlcnMveHVqdW5qaWUvRG9jdW1lbnRzL2dpdC9wcm9qZWN0Q29tcG9uZW50L25vZGVfbW9kdWxlcy9iYWJlbC1wcmVzZXQtcmVhY3QtYXBwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0cyI7CmltcG9ydCBfY3JlYXRlU3VwZXIgZnJvbSAiL1VzZXJzL3h1anVuamllL0RvY3VtZW50cy9naXQvcHJvamVjdENvbXBvbmVudC9ub2RlX21vZHVsZXMvYmFiZWwtcHJlc2V0LXJlYWN0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlU3VwZXIiOwp2YXIgX2pzeEZpbGVOYW1lID0gIi9Vc2Vycy94dWp1bmppZS9Eb2N1bWVudHMvZ2l0L3Byb2plY3RDb21wb25lbnQvc3JjL2xpbWl0VXBsb2FkL0xpbWl0VXBsb2FkLnRzeCI7CgooZnVuY3Rpb24gKCkgewogIHZhciBlbnRlck1vZHVsZSA9IHR5cGVvZiByZWFjdEhvdExvYWRlckdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyByZWFjdEhvdExvYWRlckdsb2JhbC5lbnRlck1vZHVsZSA6IHVuZGVmaW5lZDsKICBlbnRlck1vZHVsZSAmJiBlbnRlck1vZHVsZShtb2R1bGUpOwp9KSgpOwoKdmFyIF9fc2lnbmF0dXJlX18gPSB0eXBlb2YgcmVhY3RIb3RMb2FkZXJHbG9iYWwgIT09ICd1bmRlZmluZWQnID8gcmVhY3RIb3RMb2FkZXJHbG9iYWxbImRlZmF1bHQiXS5zaWduYXR1cmUgOiBmdW5jdGlvbiAoYSkgewogIHJldHVybiBhOwp9OwoKaW1wb3J0IHsgTG9hZGluZ091dGxpbmVkLCBQbHVzT3V0bGluZWQsIFVwbG9hZE91dGxpbmVkIH0gZnJvbSAnQGFudC1kZXNpZ24vaWNvbnMnOwppbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnOwppbXBvcnQgVXBsb2FkQWNjZXB0VHlwZSBmcm9tICcuLi9lbnVtcy9VcGxvYWRBY2NlcHRUeXBlJzsKaW1wb3J0IFVwbG9hZFR5cGUgZnJvbSAnLi4vZW51bXMvVXBsb2FkVHlwZSc7Cgp2YXIgTGltaXRVcGxvYWQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db21wb25lbnQpIHsKICBfaW5oZXJpdHMoTGltaXRVcGxvYWQsIF9Db21wb25lbnQpOwoKICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKExpbWl0VXBsb2FkKTsKCiAgZnVuY3Rpb24gTGltaXRVcGxvYWQocHJvcHMpIHsKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTGltaXRVcGxvYWQpOwoKICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcHJvcHMpOwoKICAgIF90aGlzLm9uQ2hhbmdlID0gZnVuY3Rpb24gKGluZm8pIHsKICAgICAgdmFyIHZhbGlkYXRlRmlsZSA9IF90aGlzLnByb3BzLnZhbGlkYXRlRmlsZTsgLy8gdGhpcy5zZXRTdGF0ZSh7IGZpbGVMaXN0OiBpbmZvLmZpbGVMaXN0IH0pOwoKICAgICAgaWYgKCF2YWxpZGF0ZUZpbGUpIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25lZWQgdmFsaWRhdGVGaWxlJyk7CiAgICAgIH0KCiAgICAgIHZhciBsb2FkaW5nID0gZmFsc2U7CiAgICAgIHZhciBmaWxlID0gaW5mby5maWxlOwogICAgICB2YXIgZmlsZUxpc3QgPSBpbmZvLmZpbGVMaXN0OwoKICAgICAgc3dpdGNoIChmaWxlLnN0YXR1cykgewogICAgICAgIGNhc2UgJ2RvbmUnOgogICAgICAgICAgdmFyIHN1Y2Nlc3MgPSB2YWxpZGF0ZUZpbGUoZmlsZSk7CgogICAgICAgICAgaWYgKHN1Y2Nlc3MpIHsKICAgICAgICAgICAgX3RoaXMudmFsaWRhdGVGaWxlTGlzdChmaWxlTGlzdCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBfdGhpcy5vbkVycm9yKGZpbGUpOwogICAgICAgICAgfQoKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlICd1cGxvYWRpbmcnOgogICAgICAgICAgbG9hZGluZyA9IHRydWU7CiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSAnZXJyb3InOgogICAgICAgICAgX3RoaXMudmFsaWRhdGVGaWxlTGlzdChmaWxlTGlzdCk7CgogICAgICAgICAgX3RoaXMub25FcnJvcihmaWxlKTsKCiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSAncmVtb3ZlZCc6CiAgICAgICAgICBfdGhpcy52YWxpZGF0ZUZpbGVMaXN0KGZpbGVMaXN0KTsKCiAgICAgICAgICBicmVhazsKCiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIGJyZWFrOwogICAgICB9CgogICAgICBpZiAobG9hZGluZyAhPT0gX3RoaXMuc3RhdGUubG9hZGluZykgewogICAgICAgIF90aGlzLnNldFN0YXRlKHsKICAgICAgICAgIGxvYWRpbmc6IGxvYWRpbmcKICAgICAgICB9KTsKICAgICAgfQogICAgfTsKCiAgICB2YXIgZGVmYXVsdEZpbGVMaXN0ID0gcHJvcHMuZGVmYXVsdEZpbGVMaXN0LAogICAgICAgIHZhbHVlID0gcHJvcHMudmFsdWU7CiAgICBfdGhpcy5zdGF0ZSA9IHsKICAgICAgbG9hZGluZzogZmFsc2UsCiAgICAgIGZpbGVMaXN0OiB2YWx1ZSB8fCBkZWZhdWx0RmlsZUxpc3QgfHwgW10KICAgIH07CiAgICByZXR1cm4gX3RoaXM7CiAgfQoKICBfY3JlYXRlQ2xhc3MoTGltaXRVcGxvYWQsIFt7CiAgICBrZXk6ICJjb21wb25lbnREaWRVcGRhdGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHsKICAgICAgaWYgKCd2YWx1ZScgaW4gdGhpcy5wcm9wcykgewogICAgICAgIHZhciBfdmFsdWUgPSB0aGlzLnByb3BzLnZhbHVlOwogICAgICAgIHZhciBmaWxlTGlzdCA9IHRoaXMuc3RhdGUuZmlsZUxpc3Q7IC8vIOWmguaenOacieWAvO+8jOS4lOS4jeebuOWQjO+8jOi1i+WAvO+8mwogICAgICAgIC8vIOWmguaenOaXoOWAvO+8jOS9huaYr3N0YXRl5pyJ5YC877yM5riF6Zmkc3RhdGXnmoTlgLwKCiAgICAgICAgaWYgKF92YWx1ZSkgewogICAgICAgICAgaWYgKF92YWx1ZSAhPT0gZmlsZUxpc3QpIHsKICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7CiAgICAgICAgICAgICAgZmlsZUxpc3Q6IF92YWx1ZQogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgaWYgKGZpbGVMaXN0ICYmIGZpbGVMaXN0Lmxlbmd0aCkgewogICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7CiAgICAgICAgICAgIGZpbGVMaXN0OiBbXQogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0QWNjZXB0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRBY2NlcHQoKSB7CiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsCiAgICAgICAgICBhY2NlcHQgPSBfdGhpcyRwcm9wcy5hY2NlcHQsCiAgICAgICAgICB0eXBlID0gX3RoaXMkcHJvcHMudHlwZTsKCiAgICAgIGlmIChhY2NlcHQgPT09IHVuZGVmaW5lZCkgewogICAgICAgIHN3aXRjaCAodHlwZSkgewogICAgICAgICAgY2FzZSBVcGxvYWRUeXBlLklNQUdFOgogICAgICAgICAgICByZXR1cm4gVXBsb2FkQWNjZXB0VHlwZS5JTUFHRTsKCiAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICByZXR1cm4gJyc7CiAgICAgICAgfQogICAgICB9CgogICAgICByZXR1cm4gYWNjZXB0OwogICAgfQogIH0sIHsKICAgIGtleTogInJlbmRlckNob29zZWVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJDaG9vc2VlcigpIHsKICAgICAgdmFyIF90aGlzJHN0YXRlID0gdGhpcy5zdGF0ZSwKICAgICAgICAgIGxvYWRpbmcgPSBfdGhpcyRzdGF0ZS5sb2FkaW5nLAogICAgICAgICAgZmlsZUxpc3QgPSBfdGhpcyRzdGF0ZS5maWxlTGlzdDsKICAgICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsCiAgICAgICAgICBtYXhOdW1iZXIgPSBfdGhpcyRwcm9wczIubWF4TnVtYmVyLAogICAgICAgICAgcmVuZGVyQ2hvb3NlciA9IF90aGlzJHByb3BzMi5yZW5kZXJDaG9vc2VyLAogICAgICAgICAgdHlwZSA9IF90aGlzJHByb3BzMi50eXBlLAogICAgICAgICAgZGlzYWJsZWQgPSBfdGhpcyRwcm9wczIuZGlzYWJsZWQ7CiAgICAgIHZhciBmaWxlTnVtYmVyID0gZmlsZUxpc3QubGVuZ3RoOwogICAgICB2YXIgY2hvb3NlRW5hYmxlID0gIW1heE51bWJlciB8fCBmaWxlTnVtYmVyIDwgbWF4TnVtYmVyOwoKICAgICAgaWYgKCFjaG9vc2VFbmFibGUpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQoKICAgICAgaWYgKHJlbmRlckNob29zZXIpIHsKICAgICAgICByZXR1cm4gcmVuZGVyQ2hvb3Nlcihsb2FkaW5nKTsKICAgICAgfQoKICAgICAgc3dpdGNoICh0eXBlKSB7CiAgICAgICAgY2FzZSBVcGxvYWRUeXBlLklNQUdFOgogICAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KCJkaXYiLCB7CiAgICAgICAgICAgIF9fc2VsZjogdGhpcywKICAgICAgICAgICAgX19zb3VyY2U6IHsKICAgICAgICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICAgICAgICAgIGxpbmVOdW1iZXI6IDE0OSwKICAgICAgICAgICAgICBjb2x1bW5OdW1iZXI6IDExCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sIGxvYWRpbmcgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChMb2FkaW5nT3V0bGluZWQsIHsKICAgICAgICAgICAgX19zZWxmOiB0aGlzLAogICAgICAgICAgICBfX3NvdXJjZTogewogICAgICAgICAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgICAgICAgICAgbGluZU51bWJlcjogMTUwLAogICAgICAgICAgICAgIGNvbHVtbk51bWJlcjogMjQKICAgICAgICAgICAgfQogICAgICAgICAgfSkgOiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChQbHVzT3V0bGluZWQsIHsKICAgICAgICAgICAgX19zZWxmOiB0aGlzLAogICAgICAgICAgICBfX3NvdXJjZTogewogICAgICAgICAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgICAgICAgICAgbGluZU51bWJlcjogMTUwLAogICAgICAgICAgICAgIGNvbHVtbk51bWJlcjogNDYKICAgICAgICAgICAgfQogICAgICAgICAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KCJkaXYiLCB7CiAgICAgICAgICAgIGNsYXNzTmFtZTogImFudC11cGxvYWQtdGV4dCIsCiAgICAgICAgICAgIF9fc2VsZjogdGhpcywKICAgICAgICAgICAgX19zb3VyY2U6IHsKICAgICAgICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICAgICAgICAgIGxpbmVOdW1iZXI6IDE1MSwKICAgICAgICAgICAgICBjb2x1bW5OdW1iZXI6IDEzCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sICJcdTRFMEFcdTRGMjAiKSk7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX0J1dHRvbiwgewogICAgICAgICAgICBsb2FkaW5nOiBsb2FkaW5nLAogICAgICAgICAgICBkaXNhYmxlZDogZGlzYWJsZWQsCiAgICAgICAgICAgIGljb246IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFVwbG9hZE91dGxpbmVkLCB7CiAgICAgICAgICAgICAgX19zZWxmOiB0aGlzLAogICAgICAgICAgICAgIF9fc291cmNlOiB7CiAgICAgICAgICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICAgICAgICAgICAgbGluZU51bWJlcjogMTU2LAogICAgICAgICAgICAgICAgY29sdW1uTnVtYmVyOiA2MwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9fc2VsZjogdGhpcywKICAgICAgICAgICAgX19zb3VyY2U6IHsKICAgICAgICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICAgICAgICAgIGxpbmVOdW1iZXI6IDE1NiwKICAgICAgICAgICAgICBjb2x1bW5OdW1iZXI6IDExCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sICJcdTRFMEFcdTRGMjAiKTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogIm9uRXJyb3IiLAogICAgdmFsdWU6IGZ1bmN0aW9uIG9uRXJyb3IoZmlsZSkgewogICAgICB2YXIgb25FcnJvciA9IHRoaXMucHJvcHMub25FcnJvcjsKCiAgICAgIGlmIChvbkVycm9yKSB7CiAgICAgICAgb25FcnJvcihmaWxlKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBfbWVzc2FnZS5lcnJvcigiIi5jb25jYXQoZmlsZS5uYW1lLCAiXHU0RTBBXHU0RjIwXHU1OTMxXHU4RDI1IikpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAidmFsaWRhdGVGaWxlTGlzdCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsaWRhdGVGaWxlTGlzdChmaWxlTGlzdCkgewogICAgICB2YXIgX3RoaXMkcHJvcHMzID0gdGhpcy5wcm9wcywKICAgICAgICAgIHZhbGlkYXRlRmlsZSA9IF90aGlzJHByb3BzMy52YWxpZGF0ZUZpbGUsCiAgICAgICAgICBvbkNoYW5nZSA9IF90aGlzJHByb3BzMy5vbkNoYW5nZTsKCiAgICAgIGlmICghdmFsaWRhdGVGaWxlKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCduZWVkIHZhbGlkYXRlRmlsZScpOwogICAgICB9CgogICAgICB2YXIgbmV3RmlsZUxpc3QgPSBmaWxlTGlzdC5maWx0ZXIoZnVuY3Rpb24gKGZpbGUpIHsKICAgICAgICByZXR1cm4gdmFsaWRhdGVGaWxlKGZpbGUpOwogICAgICB9KTsKICAgICAgdGhpcy5zZXRTdGF0ZSh7CiAgICAgICAgZmlsZUxpc3Q6IG5ld0ZpbGVMaXN0CiAgICAgIH0sIGZ1bmN0aW9uICgpIHsKICAgICAgICBpZiAob25DaGFuZ2UpIHsKICAgICAgICAgIG9uQ2hhbmdlKG5ld0ZpbGVMaXN0KTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkgewogICAgICB2YXIgX3RoaXMkcHJvcHM0ID0gdGhpcy5wcm9wcywKICAgICAgICAgIHR5cGUgPSBfdGhpcyRwcm9wczQudHlwZSwKICAgICAgICAgIGRpc2FibGVkID0gX3RoaXMkcHJvcHM0LmRpc2FibGVkLAogICAgICAgICAgYWN0aW9uID0gX3RoaXMkcHJvcHM0LmFjdGlvbiwKICAgICAgICAgIHVwbG9hZFByb3BzID0gX3RoaXMkcHJvcHM0LnVwbG9hZFByb3BzLAogICAgICAgICAgZGlzYWJsZUNyZWRlbnRpYWxzID0gX3RoaXMkcHJvcHM0LmRpc2FibGVDcmVkZW50aWFsczsKICAgICAgdmFyIGZpbGVMaXN0ID0gdGhpcy5zdGF0ZS5maWxlTGlzdDsKCiAgICAgIHZhciBwcm9wcyA9IF9vYmplY3RTcHJlYWQoewogICAgICAgIGZpbGVMaXN0OiBmaWxlTGlzdCwKICAgICAgICBkaXNhYmxlZDogZGlzYWJsZWQsCiAgICAgICAgYWNjZXB0OiB0aGlzLmdldEFjY2VwdCgpLAogICAgICAgIGFjdGlvbjogYWN0aW9uLAogICAgICAgIHdpdGhDcmVkZW50aWFsczogIWRpc2FibGVDcmVkZW50aWFscywKICAgICAgICBvbkNoYW5nZTogdGhpcy5vbkNoYW5nZSwKICAgICAgICBsaXN0VHlwZTogdHlwZSA9PT0gVXBsb2FkVHlwZS5JTUFHRSA/ICdwaWN0dXJlLWNhcmQnIDogJ3RleHQnCiAgICAgIH0sIHVwbG9hZFByb3BzKTsKCiAgICAgIHN3aXRjaCAodHlwZSkgewogICAgICAgIGNhc2UgVXBsb2FkVHlwZS5JTUFHRToKICAgICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChfVXBsb2FkLCBPYmplY3QuYXNzaWduKHt9LCBwcm9wcywgewogICAgICAgICAgICBsaXN0VHlwZTogInBpY3R1cmUtY2FyZCIsCiAgICAgICAgICAgIF9fc2VsZjogdGhpcywKICAgICAgICAgICAgX19zb3VyY2U6IHsKICAgICAgICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICAgICAgICAgIGxpbmVOdW1iZXI6IDI0MywKICAgICAgICAgICAgICBjb2x1bW5OdW1iZXI6IDExCiAgICAgICAgICAgIH0KICAgICAgICAgIH0pLCB0aGlzLnJlbmRlckNob29zZWVyKCkpOwoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KF9VcGxvYWQsIE9iamVjdC5hc3NpZ24oe30sIHByb3BzLCB7CiAgICAgICAgICAgIF9fc2VsZjogdGhpcywKICAgICAgICAgICAgX19zb3VyY2U6IHsKICAgICAgICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICAgICAgICAgIGxpbmVOdW1iZXI6IDI0OCwKICAgICAgICAgICAgICBjb2x1bW5OdW1iZXI6IDE2CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pLCB0aGlzLnJlbmRlckNob29zZWVyKCkpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAiX19yZWFjdHN0YW5kaW5fX3JlZ2VuZXJhdGVCeUV2YWwiLAogICAgLy8gQHRzLWlnbm9yZQogICAgdmFsdWU6IGZ1bmN0aW9uIF9fcmVhY3RzdGFuZGluX19yZWdlbmVyYXRlQnlFdmFsKGtleSwgY29kZSkgewogICAgICAvLyBAdHMtaWdub3JlCiAgICAgIHRoaXNba2V5XSA9IGV2YWwoY29kZSk7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gTGltaXRVcGxvYWQ7Cn0oQ29tcG9uZW50KTsKCnZhciBfZGVmYXVsdCA9IExpbWl0VXBsb2FkOwpleHBvcnQgZGVmYXVsdCBfZGVmYXVsdDsKCmlmICh0eXBlb2YgTGltaXRVcGxvYWQgIT09ICd1bmRlZmluZWQnICYmIExpbWl0VXBsb2FkICYmIExpbWl0VXBsb2FkID09PSBPYmplY3QoTGltaXRVcGxvYWQpICYmIE9iamVjdC5pc0V4dGVuc2libGUoTGltaXRVcGxvYWQpKSB7CiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KExpbWl0VXBsb2FkLCAnX19maWxlbWV0YScsIHsKICAgIGVudW1lcmFibGU6IHRydWUsCiAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICB2YWx1ZTogewogICAgICBuYW1lOiAiTGltaXRVcGxvYWQiLAogICAgICBmaWxlbmFtZTogInNyYy9saW1pdFVwbG9hZC9MaW1pdFVwbG9hZC50c3giCiAgICB9CiAgfSk7Cn0KCjsKCihmdW5jdGlvbiAoKSB7CiAgdmFyIHJlYWN0SG90TG9hZGVyID0gdHlwZW9mIHJlYWN0SG90TG9hZGVyR2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IHJlYWN0SG90TG9hZGVyR2xvYmFsLmRlZmF1bHQgOiB1bmRlZmluZWQ7CgogIGlmICghcmVhY3RIb3RMb2FkZXIpIHsKICAgIHJldHVybjsKICB9CgogIHJlYWN0SG90TG9hZGVyLnJlZ2lzdGVyKExpbWl0VXBsb2FkLCAiTGltaXRVcGxvYWQiLCAiL1VzZXJzL3h1anVuamllL0RvY3VtZW50cy9naXQvcHJvamVjdENvbXBvbmVudC9zcmMvbGltaXRVcGxvYWQvTGltaXRVcGxvYWQudHN4Iik7CiAgcmVhY3RIb3RMb2FkZXIucmVnaXN0ZXIoX2RlZmF1bHQsICJkZWZhdWx0IiwgIi9Vc2Vycy94dWp1bmppZS9Eb2N1bWVudHMvZ2l0L3Byb2plY3RDb21wb25lbnQvc3JjL2xpbWl0VXBsb2FkL0xpbWl0VXBsb2FkLnRzeCIpOwp9KSgpOwoKOwoKKGZ1bmN0aW9uICgpIHsKICB2YXIgbGVhdmVNb2R1bGUgPSB0eXBlb2YgcmVhY3RIb3RMb2FkZXJHbG9iYWwgIT09ICd1bmRlZmluZWQnID8gcmVhY3RIb3RMb2FkZXJHbG9iYWwubGVhdmVNb2R1bGUgOiB1bmRlZmluZWQ7CiAgbGVhdmVNb2R1bGUgJiYgbGVhdmVNb2R1bGUobW9kdWxlKTsKfSkoKTs="},{"version":3,"sources":["/Users/xujunjie/Documents/git/projectComponent/src/limitUpload/LimitUpload.tsx"],"names":["LoadingOutlined","PlusOutlined","UploadOutlined","React","Component","UploadAcceptType","UploadType","LimitUpload","props","onChange","info","validateFile","Error","loading","file","fileList","status","success","validateFileList","onError","state","setState","defaultFileList","value","length","accept","type","undefined","IMAGE","maxNumber","renderChooser","disabled","fileNumber","chooseEnable","error","name","newFileList","filter","action","uploadProps","disableCredentials","getAccept","withCredentials","listType","renderChooseer"],"mappings":"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","sourcesContent":["import { LoadingOutlined, PlusOutlined, UploadOutlined } from '@ant-design/icons';\nimport { Button, message, Upload } from 'antd';\nimport { UploadChangeParam } from 'antd/lib/upload';\nimport { UploadFile, UploadProps } from 'antd/lib/upload/interface';\nimport React, { Component, ReactNode } from 'react';\nimport UploadAcceptType from '../enums/UploadAcceptType';\nimport UploadType from '../enums/UploadType';\nimport IComponentProps from '../interfaces/IComponentProps';\n\ninterface ILimitUploadState {\n  loading: boolean;\n  fileList: UploadFile<any>[];\n}\ninterface ILimitUploadProps extends IComponentProps {\n  /**\n   * 验证文件是否上传成功。\n   *\n   * @return 返回是否上传成功\n   */\n  validateFile?: (file: UploadFile<any>) => boolean;\n\n  /**\n   * 上传出错的处理函数，不传则使用默认处理方法：message.error()显示错误提示\n   */\n  onError?: (file: UploadFile<any>) => void;\n\n  /**\n   * 最大允许上传的文件数量\n   */\n  maxNumber?: number;\n\n  /**\n   * 类型，是普通文件还是图像\n   *\n   * @see UploadType\n   */\n  type?: UploadType;\n\n  /**\n   * 是否禁用\n   */\n  disabled?: boolean;\n\n  /**\n   * 文件发生变化时触发的事件\n   */\n  onChange?: (value: UploadFile<any>[]) => void;\n\n  /**\n   * 默认的文件列表。\n   *\n   * 通常在编辑时，需要使用，例如：之前上传过的文件，可使用此属性设置\n   */\n  defaultFileList?: UploadFile<any>[];\n\n  /**\n   * 文件列表\n   */\n  value?: UploadFile<any>[];\n\n  /**\n   * 选择元素的渲染函数，如果没有，使用默认方案\n   */\n  renderChooser?: (loading?: boolean) => ReactNode;\n\n  /**\n   * 可选的文件后缀。\n   *\n   * 不设置，则根据type自动设置\n   *\n   * @example \".jpg, .png\"\n   */\n  accept?: string | UploadAcceptType;\n\n  /**\n   * 上传接口路径\n   */\n  action?: string;\n\n  /**\n   * 是否禁用cookie\n   */\n  disableCredentials?: boolean;\n\n  /**\n   * 其它要传给Upload的props，此属性的优先级高于其它属性。\n   *\n   * 例如：在此属性设置了accept，则优先使用此处设置的accept\n   */\n  uploadProps?: UploadProps;\n}\n\nclass LimitUpload extends Component<ILimitUploadProps, ILimitUploadState> {\n  constructor(props: ILimitUploadProps) {\n    super(props);\n    const { defaultFileList, value } = props;\n    this.state = {\n      loading: false,\n      fileList: value || defaultFileList || [],\n    };\n  }\n\n  public componentDidUpdate() {\n    if ('value' in this.props) {\n      const value = this.props.value;\n      const { fileList } = this.state;\n      // 如果有值，且不相同，赋值；\n      // 如果无值，但是state有值，清除state的值\n      if (value) {\n        if (value !== fileList) {\n          this.setState({ fileList: value });\n        }\n      } else if (fileList && fileList.length) {\n        this.setState({ fileList: [] });\n      }\n    }\n  }\n\n  private getAccept() {\n    const { accept, type } = this.props;\n    if (accept === undefined) {\n      switch (type) {\n        case UploadType.IMAGE:\n          return UploadAcceptType.IMAGE;\n        default:\n          return '';\n      }\n    }\n    return accept;\n  }\n\n  private renderChooseer() {\n    const { loading, fileList } = this.state;\n    const { maxNumber, renderChooser, type, disabled } = this.props;\n\n    const fileNumber = fileList.length;\n    const chooseEnable = !maxNumber || fileNumber < maxNumber;\n    if (!chooseEnable) {\n      return null;\n    }\n\n    if (renderChooser) {\n      return renderChooser(loading);\n    }\n\n    switch (type) {\n      case UploadType.IMAGE:\n        return (\n          <div>\n            {loading ? <LoadingOutlined /> : <PlusOutlined />}\n            <div className=\"ant-upload-text\">上传</div>\n          </div>\n        );\n      default:\n        return (\n          <Button loading={loading} disabled={disabled} icon={<UploadOutlined />}>\n            上传\n          </Button>\n        );\n    }\n  }\n\n  private onChange = (info: UploadChangeParam<UploadFile<any>>) => {\n    const { validateFile } = this.props;\n    // this.setState({ fileList: info.fileList });\n    if (!validateFile) {\n      throw new Error('need validateFile');\n    }\n    let loading = false;\n    const file = info.file;\n\n    const fileList = info.fileList;\n\n    switch (file.status) {\n      case 'done':\n        const success = validateFile(file);\n        if (success) {\n          this.validateFileList(fileList);\n        } else {\n          this.onError(file);\n        }\n        break;\n      case 'uploading':\n        loading = true;\n        break;\n      case 'error':\n        this.validateFileList(fileList);\n        this.onError(file);\n        break;\n      case 'removed':\n        this.validateFileList(fileList);\n        break;\n      default:\n        break;\n    }\n\n    if (loading !== this.state.loading) {\n      this.setState({ loading });\n    }\n  };\n\n  private onError(file: UploadFile<any>) {\n    const { onError } = this.props;\n    if (onError) {\n      onError(file);\n    } else {\n      message.error(`${file.name}上传失败`);\n    }\n  }\n\n  private validateFileList(fileList: UploadFile<any>[]) {\n    const { validateFile, onChange } = this.props;\n    if (!validateFile) {\n      throw new Error('need validateFile');\n    }\n    const newFileList = fileList.filter(file => {\n      return validateFile(file);\n    });\n    this.setState({ fileList: newFileList }, () => {\n      if (onChange) {\n        onChange(newFileList);\n      }\n    });\n  }\n\n  public render(): ReactNode {\n    const { type, disabled, action, uploadProps, disableCredentials } = this.props;\n    const { fileList } = this.state;\n    const props: UploadProps = {\n      fileList,\n      disabled,\n      accept: this.getAccept(),\n      action,\n      withCredentials: !disableCredentials,\n      onChange: this.onChange,\n      listType: type === UploadType.IMAGE ? 'picture-card' : 'text',\n      ...uploadProps,\n    };\n\n    switch (type) {\n      case UploadType.IMAGE:\n        return (\n          <Upload {...props} listType=\"picture-card\">\n            {this.renderChooseer()}\n          </Upload>\n        );\n      default:\n        return <Upload {...props}>{this.renderChooseer()}</Upload>;\n    }\n  }\n}\n\nexport default LimitUpload;\n"]}]}