{"remainingRequest":"/Users/xujunjie/Documents/git/projectComponent/node_modules/thread-loader/dist/cjs.js??ref--11-1!/Users/xujunjie/Documents/git/projectComponent/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--11-2!/Users/xujunjie/Documents/git/projectComponent/node_modules/source-map-loader/index.js!/Users/xujunjie/Documents/git/projectComponent/src/utils/TreeControl.ts","dependencies":[{"path":"/Users/xujunjie/Documents/git/projectComponent/src/utils/TreeControl.ts","mtime":1608989725151},{"path":"/Users/xujunjie/Documents/git/projectComponent/node_modules/cache-loader/dist/cjs.js","mtime":1609062632110},{"path":"/Users/xujunjie/Documents/git/projectComponent/node_modules/thread-loader/dist/cjs.js","mtime":1609062632658},{"path":"/Users/xujunjie/Documents/git/projectComponent/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1609062558293},{"path":"/Users/xujunjie/Documents/git/projectComponent/node_modules/source-map-loader/index.js","mtime":1609062632650}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/xujunjie/Documents/git/projectComponent/src/utils/TreeControl.ts"],"names":["TreeControl","dataGetter","childrenGetter","childrenCreater","Error","tree","equal","_filterInner","parentNode","result","i","length","item","push","filterChildren","getChildren","_createChildren","list","equalParent","innerListTree","parent","children","equalFunction","chain","_searchChainInner","searchParent","child","index","node","search","realIndex","Math","max","min","_removeInner","splice","forEachFunction","_forEachInner","forEach","mapFunction","_mapInner","newNode","childResult","unshift","Function"],"mappings":"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","sourcesContent":["type equalFunctionType<T> = (node: T, index: number, parentNode: T | null) => boolean;\n\n/**\n * 一个通用的树结构操作器，对源数据的结构没有要求\n * @author yinhunfeixue\n * @email yinhunfeixue@163.com\n */\nclass TreeControl<T extends { [key: string]: any }> {\n  private dataGetter: string | ((item: T) => any);\n  private childrenGetter: string | ((item: T) => T[]);\n  private childrenCreater: string | ((item: T, children?: T[]) => T[]);\n\n  /**\n   * 创建树控制器实例\n   * @param {String|Function} dataGetter 获取结点值的方法，为字符串或(node)=>object的函数\n   * @param {String|Function} childrenGetter 获取结点子结点列表的方法，为字符串或(node)=>object的函数\n   */\n  constructor(\n    dataGetter: string | ((item: T) => any) = 'value',\n    childrenGetter: string | ((item: T) => any[]) = 'children',\n    childrenCreater: string | ((item: T, children?: T[]) => any[]) = 'children',\n  ) {\n    if (!dataGetter) {\n      throw new Error('dataGetter need value');\n    } else if (!childrenGetter) {\n      throw new Error('childrenGetter need value');\n    } else {\n      this.dataGetter = dataGetter;\n      this.childrenGetter = childrenGetter;\n      this.childrenCreater = childrenCreater;\n    }\n  }\n\n  /**\n   * 过滤树\n   * @param tree 树\n   * @param equal 是否匹配的方法，返回true，表示结果中包含此结点及基子结点\n   */\n  public filter(tree: T[], equal: equalFunctionType<T>): T[] {\n    return this._filterInner(tree, equal, null);\n  }\n\n  private _filterInner(tree: T[], equal: equalFunctionType<T>, parentNode: T | null): T[] {\n    if (!tree) {\n      return [];\n    }\n    const result: T[] = [];\n    // 循环tree\n    // 对于每一项，如果equal返回true，添加到结果列表中；否则，递归子列表，如果递归的子列表>=0，添加到结果列表\n    for (let i = 0; i < tree.length; i++) {\n      const item = { ...(tree[i] as any) };\n      if (equal(item, i, parentNode)) {\n        result.push(item);\n      } else {\n        const filterChildren = this._filterInner(this.getChildren(item), equal, item);\n        if (filterChildren && filterChildren.length > 0) {\n          result.push(item);\n          this._createChildren(item, filterChildren);\n        }\n      }\n    }\n    return result;\n  }\n\n  /**\n   * 一维数组转换成树结构\n   * @param list\n   */\n  public listToTree(list: T[], equalParent: (node: T, parentNode: T | null) => boolean): T[] {\n    return this.innerListTree(list, equalParent, null);\n  }\n\n  private innerListTree(\n    list: T[],\n    equalParent: (node: T, parentNode: T | null) => boolean,\n    parent: T | null,\n  ): T[] {\n    if (!list) {\n      return [];\n    }\n    // 循环list，针对每一项item：使用equalParent判断parent是否是item的父结点\n    // 如果是，则添加到结果列表；并以item为父结点，查找子列表\n    // 否则，不处理\n    const result: T[] = [];\n    for (let i = 0; i < list.length; i++) {\n      const item = list[i];\n      if (equalParent(item, parent)) {\n        result.push(item);\n        const children = this.innerListTree(list, equalParent, item);\n        if (children && children.length) {\n          this._createChildren(item, children);\n        }\n      }\n    }\n    return result;\n  }\n\n  /**\n   * 搜索满足指定条件的第一个结点\n   * @param 树结点的数据\n   * @param 匹配函数\n   */\n  search(tree: T[], equalFunction: equalFunctionType<T>) {\n    let chain = this._searchChainInner(tree, equalFunction);\n    return chain && chain.length ? chain[chain.length - 1] : null;\n  }\n\n  /**\n   * 搜索满足指定条件的第一个结点的父结点\n   * @param tree 树\n   * @param equalFunction 匹配函数，格式为(node, index, parentNode)=>bool\n   */\n  searchParent(tree: T[], equalFunction: equalFunctionType<T>) {\n    let chain = this._searchChainInner(tree, equalFunction);\n    if (chain && chain.length >= 2) {\n      return chain[chain.length - 2];\n    }\n    return null;\n  }\n\n  /**\n   * 获取满足指定条件的第一个结点在父结点子列表中的位置，如果无父结点，或结点不存在，返回-1\n   * @param tree 树\n   * @param equalFunction 匹配函数，格式为(node, index, parentNode)=>bool\n   *\n   * @return {Number} 指定条件的结点所在的位置\n   */\n  getIndex(tree: T[], equalFunction: equalFunctionType<T>) {\n    let parent = this.searchParent(tree, equalFunction);\n    if (parent) {\n      let children = this.getChildren(parent);\n      for (let i = 0; i < children.length; i++) {\n        if (equalFunction(children[i], i, parent)) {\n          return i;\n        }\n      }\n    }\n    return -1;\n  }\n\n  addAt(tree: T[], equalFunction: equalFunctionType<T>, child: T, index = -1) {\n    let node = this.search(tree, equalFunction);\n    if (node) {\n      let children = this.getChildren(node);\n      if (!children) {\n        children = this._createChildren(node);\n      }\n\n      if (children) {\n        let realIndex = Math.max(0, Math.min(children.length, index));\n        children[realIndex] = child;\n      }\n    }\n  }\n\n  remove(tree: T[], equalFunction: equalFunctionType<T>) {\n    this._removeInner(tree, equalFunction);\n  }\n\n  /**\n   *\n   * @param tree\n   * @param equalFunction\n   */\n  _removeInner(tree: T[], equalFunction: equalFunctionType<T>, parent: T | null = null) {\n    if (tree) {\n      //遍历结点\n      for (let i = 0; i < tree.length; i++) {\n        let node = tree[i];\n        //如果当前结点符合被删除的条件，则删除；不符合，则递归子结点\n        if (equalFunction(node, i, parent)) {\n          tree.splice(i, 1);\n          i--;\n        } else {\n          this._removeInner(this.getChildren(node), equalFunction, node);\n        }\n      }\n    }\n  }\n\n  /**\n   * 搜索满足条件的第一个结点，并返回从一级结点到指定结点的数组，第一项是一级结点，最后一项是符合条件的结点\n   * @param tree 树\n   * @param equalFunction 匹配函数\n   */\n  searchChain(tree: T[], equalFunction: equalFunctionType<T>) {\n    return this._searchChainInner(tree, equalFunction);\n  }\n\n  /**\n   * 遍历树结点，并对每个结点执行回调函数\n   * @param {Array} tree 树\n   * @param {Function} forEachFunction 回调函数\n   */\n  forEach(tree: T[], forEachFunction: (node: T, index: number, parentNode: T | null) => void) {\n    this._forEachInner(tree, forEachFunction);\n  }\n\n  /**\n   * 查找所有符合条件的结点，并返回符合条件结点的一维数组\n   * @param tree 树\n   * @param equalFunction 匹配函数\n   */\n  find(tree: T[], equalFunction: equalFunctionType<T>) {\n    let result: T[] = [];\n    this.forEach(tree, (node, i, parent) => {\n      if (equalFunction(node, i, parent)) {\n        result.push(node);\n      }\n    });\n    return result;\n  }\n\n  /**\n   * 计算树的结点总数\n   * @param tree 树\n   */\n  count(tree: T[]) {\n    let result = 0;\n    this.forEach(tree, () => {\n      result++;\n    });\n    return result;\n  }\n\n  /**\n   * 遍历树，并创建和原结构一致的新树。新树的结点为原树结点调用函数处理后的值\n   *\n   * **注意**，新树不会自动创建子结点，需要在mapFunction中，把返回值和参数中的newChildren进行关联，例如result.children = newChildren\n   *\n   * @param tree\n   * @param {*} mapFunction 格式为(node, index, oldParent, newChildren)=>Object\n   */\n  map<W>(\n    tree: T[],\n    mapFunction: (node: T, index: number, oldParent: T | null, newChildren: W[] | null) => W,\n  ) {\n    return this._mapInner(tree, mapFunction);\n  }\n\n  /**\n   *\n   * @param {*} tree\n   * @param {*} mapFunction\n   * @param {*} parent\n   *\n   * @private\n   */\n  _mapInner<W>(\n    tree: T[],\n    mapFunction: (node: T, index: number, oldParent: T | null, newChildren: W[] | null) => W,\n    parent: T | null = null,\n  ) {\n    //循环树结点，并先递归子树，获取用mapFunction创建的新子树\n    //子树递归完成后，用mapFunction对当前结点创建新结点，并放到新树中\n    //把子树放到新结点的子列表中\n    if (tree) {\n      let result = [];\n      for (let i = 0; i < tree.length; i++) {\n        let node = tree[i];\n        let children = this._mapInner(this.getChildren(node), mapFunction, node);\n        let newNode = mapFunction(node, i, parent, children);\n        result.push(newNode);\n      }\n      return result;\n    }\n    return null;\n  }\n\n  /**\n   * 内部用于递归搜索结点链的函数\n   * @param tree 树\n   * @param equalFunction 匹配函数，格式为(node, index, parentNode)=>bool\n   * @param parent 父结点\n   *\n   * @private\n   *\n   * @return {Array} 从根结点当符合条件的结点的数组\n   */\n  private _searchChainInner(\n    tree: T[],\n    equalFunction: equalFunctionType<T>,\n    parent: T | null = null,\n  ): T[] | null {\n    if (tree) {\n      //循环树，如果有结点符合条件，则放到数组中返回\n      //如果结点不符合条件，但是有子结点，则递归子结点，如果从子结点中找到结点，把当前结点放到子结果中，一起返回\n      for (let i = 0; i < tree.length; i++) {\n        let node = tree[i];\n        if (equalFunction(node, i, parent)) {\n          return [node];\n        } else {\n          let children = this.getChildren(node);\n          if (children) {\n            let childResult = this._searchChainInner(children, equalFunction, node);\n            if (childResult) {\n              childResult.unshift(node);\n              return childResult;\n            }\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * 遍历树\n   * @param tree\n   * @param forEachFunction 要对结点进行操作的函数，格式为(node, index, parentNode)=>void\n   * @param parent\n   *\n   * @private\n   */\n  private _forEachInner(\n    tree: T[],\n    forEachFunction: (node: T, index: number, parentNode: T | null) => void,\n    parent = null,\n  ) {\n    if (tree) {\n      //遍历结点，对结点执行操作，并递归子结点\n      for (let i = 0; i < tree.length; i++) {\n        let node = tree[i];\n        forEachFunction(node, i, parent);\n        this._forEachInner(this.getChildren(node), forEachFunction);\n      }\n    }\n    return null;\n  }\n\n  /**\n   * 获取结点的值\n   * @param {*} node\n   */\n  getNodeData(node: T) {\n    if (this.dataGetter instanceof Function) {\n      return this.dataGetter(node);\n    } else {\n      return node[this.dataGetter];\n    }\n  }\n\n  /**\n   * 获取结点的子结点列表\n   * @param {*} node\n   *\n   * @return {Array}\n   */\n  getChildren(node: T) {\n    if (this.childrenGetter instanceof Function) {\n      return this.childrenGetter(node);\n    } else {\n      return node[this.childrenGetter];\n    }\n  }\n\n  _createChildren(node: T, children?: T[]) {\n    if (this.childrenCreater instanceof Function) {\n      return this.childrenCreater(node, children);\n    } else {\n      (node as any)[this.childrenCreater] = children || [];\n      return node[this.childrenCreater];\n    }\n  }\n}\n\nexport default TreeControl;\n"]}]}