{"remainingRequest":"/Users/xujunjie/Documents/git/projectComponent/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/xujunjie/Documents/git/projectComponent/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/xujunjie/Documents/git/projectComponent/node_modules/source-map-loader/index.js!/Users/xujunjie/Documents/git/projectComponent/src/TreeCurd/TreeCurd.mdx","dependencies":[{"path":"/Users/xujunjie/Documents/git/projectComponent/src/TreeCurd/TreeCurd.mdx","mtime":1594367130784},{"path":"/Users/xujunjie/Documents/git/projectComponent/node_modules/cache-loader/dist/cjs.js","mtime":1609062632110},{"path":"/Users/xujunjie/Documents/git/projectComponent/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1609062558293},{"path":"/Users/xujunjie/Documents/git/projectComponent/node_modules/@mdx-js/loader/index.js","mtime":1609062631902},{"path":"/Users/xujunjie/Documents/git/projectComponent/node_modules/source-map-loader/index.js","mtime":1609062632650}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/xujunjie/Documents/git/projectComponent/src/TreeCurd/TreeCurd.mdx"],"names":["React","mdx","Playground","Props","TreeCurd","EditType","FormUtil","layoutProps","MDXLayout","MDXContent","components","props","Button","Input","Form","Space","message","formRef","createRef","ids","info","fetch","then","id","name","children","extraData","selectedItems","selectedKeys","type","refresh","current","ADD","resetFields","EDIT","setFieldsValue","renderFormItems","label","content","labelSpan","formItemProps","rules","required","Component","marginTop","state","checkedItems","defaultCheckedKeys","checkedInfo","checkedNodes","filter","item","length","map","key","setState","node","style","color","childrenCustom","expandedKeys","defaultRender","isMDXComponent"],"mappings":"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","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport 'antd/dist/antd.css';\nimport TreeCurd, {EditType} from './TreeCurd';\nimport { Button, Input, Form, Space, message } from 'antd';\nimport FormUtil from '../utils/FormUtil'\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"treecurd\"\n    }}>{`TreeCurd`}</h1>\n    <p>{`一个可以自定义树操作的树组件`}</p>\n    <h3 {...{\n      \"id\": \"主要做了以下工作\"\n    }}>{`主要做了以下工作`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`处理树的编辑 新增  删除  编辑`}</li>\n      <li parentName=\"ul\">{`处理树的多选`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"你可以\"\n    }}>{`你可以`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`自定义树编辑区域`}</li>\n      <li parentName=\"ul\">{`自定义对树的操作`}</li>\n      <li parentName=\"ul\">{`自定义是否可多选`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"示例\"\n    }}>{`示例`}</h2>\n    <p>{`涉及网络操作，建议在开发者工具中限制后观察示例`}</p>\n    <h2 {...{\n      \"id\": \"基本用法\"\n    }}>{`基本用法`}</h2>\n    <Playground __position={0} __code={'class Demo extends React.Component {\\n    constructor(props) {\\n      super(props)\\n      this.formRef = React.createRef()\\n    }\\n    render() {\\n      return (\\n        <TreeCurd\\n          getKey=\\\"id\\\"\\n          showSearch\\n          deleteFunction={ids => message.info(ids)}\\n          getTreeData={() => {\\n            return fetch(\\'./\\').then(() => {\\n              return [\\n                {\\n                  id: \\'0-0\\',\\n                  name: \\'0-0\\',\\n                  children: [\\n                    {\\n                      id: \\'0-0-1\\',\\n                      name: \\'0-0-1\\',\\n                    },\\n                  ],\\n                },\\n                {\\n                  id: \\'0-1\\',\\n                  name: \\'0-1\\',\\n                  children: [\\n                    {\\n                      id: \\'0-1-1\\',\\n                      name: \\'0-1-1\\',\\n                    },\\n                  ],\\n                },\\n              ]\\n            })\\n          }}\\n          renderEditExtra={extraData => {\\n            const { selectedItems, selectedKeys, type, refresh } = extraData\\n            if (type && this.formRef && this.formRef.current) {\\n              if (type === EditType.ADD) {\\n                this.formRef.current.resetFields()\\n              } else if (type === EditType.EDIT) {\\n                this.formRef.current.setFieldsValue(selectedItems[0])\\n              } else {\\n                this.formRef.current.resetFields()\\n              }\\n            }\\n            return (\\n              <React.Fragment>\\n                <Form ref={this.formRef}>\\n                  {FormUtil.renderFormItems(\\n                    [\\n                      {\\n                        label: \\'类型\\',\\n                        content: (\\n                          <span>\\n                            {type === \\'add\\' ? \\'新增\\' : type ? \\'编辑\\' : \\'\\'}\\n                          </span>\\n                        ),\\n                        name: \\'type\\',\\n                        labelSpan: 3,\\n                        formItemProps: {\\n                          children: \\'\\',\\n                          rules: [\\n                            {\\n                              required: false,\\n                            },\\n                          ],\\n                        },\\n                      },\\n                      {\\n                        label: \\'名称\\',\\n                        content: <Input />,\\n                        name: \\'name\\',\\n                        labelSpan: 3,\\n                        formItemProps: {\\n                          children: \\'\\',\\n                          rules: [\\n                            {\\n                              required: true,\\n                            },\\n                          ],\\n                        },\\n                      },\\n                      {\\n                        label: \\'编码\\',\\n                        content: <Input />,\\n                        name: \\'id\\',\\n                        labelSpan: 3,\\n                        formItemProps: {\\n                          children: \\'\\',\\n                          rules: [\\n                            {\\n                              required: true,\\n                            },\\n                          ],\\n                        },\\n                      },\\n                      {\\n                        labelSpan: 3,\\n                        content: (\\n                          <div className=\\\"fb-ControlGroup\\\">\\n                            <Space>\\n                              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\">\\n                                确定\\n                              </Button>\\n                              <Button onClick={refresh}>重置</Button>\\n                            </Space>\\n                          </div>\\n                        ),\\n                      },\\n                    ],\\n                    1,\\n                  )}\\n                </Form>\\n              </React.Fragment>\\n            )\\n          }}\\n        />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      TreeCurd,\n      EditType,\n      Button,\n      Input,\n      Form,\n      Space,\n      message,\n      FormUtil\n    }} __codesandbox={``} mdxType=\"Playground\">\n      {class Demo extends React.Component {\n        constructor(props) {\n          super(props);\n          this.formRef = React.createRef();\n        }\n\n        render() {\n          return <TreeCurd getKey='id' showSearch deleteFunction={ids => message.info(ids)} getTreeData={() => {\n            return fetch('./').then(() => {\n              return [{\n                id: \"0-0\",\n                name: \"0-0\",\n                children: [{\n                  id: \"0-0-1\",\n                  name: \"0-0-1\"\n                }]\n              }, {\n                id: \"0-1\",\n                name: \"0-1\",\n                children: [{\n                  id: \"0-1-1\",\n                  name: \"0-1-1\"\n                }]\n              }];\n            });\n          }} renderEditExtra={extraData => {\n            const {\n              selectedItems,\n              selectedKeys,\n              type,\n              refresh\n            } = extraData;\n\n            if (type && this.formRef && this.formRef.current) {\n              if (type === EditType.ADD) {\n                this.formRef.current.resetFields();\n              } else if (type === EditType.EDIT) {\n                this.formRef.current.setFieldsValue(selectedItems[0]);\n              } else {\n                this.formRef.current.resetFields();\n              }\n            }\n\n            return <React.Fragment>\n                <Form ref={this.formRef} mdxType=\"Form\">\n                  {FormUtil.renderFormItems([{\n                  label: '类型',\n                  content: <span>{type === 'add' ? '新增' : type ? '编辑' : ''}</span>,\n                  name: 'type',\n                  labelSpan: 3,\n                  formItemProps: {\n                    children: '',\n                    rules: [{\n                      required: false\n                    }]\n                  }\n                }, {\n                  label: '名称',\n                  content: <Input mdxType=\"Input\" />,\n                  name: 'name',\n                  labelSpan: 3,\n                  formItemProps: {\n                    children: '',\n                    rules: [{\n                      required: true\n                    }]\n                  }\n                }, {\n                  label: '编码',\n                  content: <Input mdxType=\"Input\" />,\n                  name: 'id',\n                  labelSpan: 3,\n                  formItemProps: {\n                    children: '',\n                    rules: [{\n                      required: true\n                    }]\n                  }\n                }, {\n                  labelSpan: 3,\n                  content: <div className=\"fb-ControlGroup\">\n                            <Space mdxType=\"Space\">\n                              <Button type=\"primary\" htmlType=\"submit\" mdxType=\"Button\">\n                                确定\n                              </Button>\n                              <Button onClick={refresh} mdxType=\"Button\">重置</Button>\n                            </Space>\n                          </div>\n                }], 1)}\n                </Form>\n              </React.Fragment>;\n          }} mdxType=\"TreeCurd\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"可以设置为可多选的树\"\n    }}>{`可以设置为可多选的树`}</h2>\n    <Playground __position={1} __code={'<TreeCurd\\n  checkable\\n  editEnable={false}\\n  getTreeData={() => {\\n    return fetch(\\'./\\').then(() => {\\n      return [\\n        {\\n          id: \\'0-0\\',\\n          name: \\'0-0\\',\\n          children: [\\n            {\\n              id: \\'0-0-1\\',\\n              name: \\'0-0-1\\',\\n            },\\n          ],\\n        },\\n        {\\n          id: \\'0-1\\',\\n          name: \\'0-1\\',\\n          children: [\\n            {\\n              id: \\'0-1-1\\',\\n              name: \\'0-1-1\\',\\n            },\\n          ],\\n        },\\n      ]\\n    })\\n  }}\\n  renderCheckExtra={extraData => {\\n    return (\\n      <div style={{ marginTop: 20 }}>\\n        <Space>\\n          <Button type=\\\"primary\\\">确定</Button>\\n          <Button>取消</Button>\\n        </Space>\\n      </div>\\n    )\\n  }}\\n/>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      TreeCurd,\n      EditType,\n      Button,\n      Input,\n      Form,\n      Space,\n      message,\n      FormUtil\n    }} __codesandbox={``} mdxType=\"Playground\">\n  <TreeCurd checkable editEnable={false} getTreeData={() => {\n        return fetch('./').then(() => {\n          return [{\n            id: \"0-0\",\n            name: \"0-0\",\n            children: [{\n              id: \"0-0-1\",\n              name: \"0-0-1\"\n            }]\n          }, {\n            id: \"0-1\",\n            name: \"0-1\",\n            children: [{\n              id: \"0-1-1\",\n              name: \"0-1-1\"\n            }]\n          }];\n        });\n      }} renderCheckExtra={extraData => {\n        return <div style={{\n          marginTop: 20\n        }}>\n        <Space mdxType=\"Space\">\n          <Button type='primary' mdxType=\"Button\">确定</Button>\n          <Button mdxType=\"Button\">取消</Button>\n        </Space>\n      </div>;\n      }} mdxType=\"TreeCurd\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"自定义结点props\"\n    }}>{`自定义结点props`}</h2>\n    <h2 {...{\n      \"id\": \"设置oncheck回调\"\n    }}>{`设置onCheck回调`}</h2>\n    <Playground __position={2} __code={'class Demo extends React.Component {\\n    constructor(props) {\\n      super(props)\\n      this.formRef = React.createRef()\\n      this.state = {\\n        checkedItems: [],\\n        defaultCheckedKeys: [],\\n      }\\n    }\\n    render() {\\n      return (\\n        <TreeCurd\\n          getKey=\\\"id\\\"\\n          deleteFunction={ids => message.info(ids)}\\n          checkable\\n          editEnable={false}\\n          defaultCheckedKeys={this.state.defaultCheckedKeys}\\n          onCheck={(extraData, checkedInfo) => {\\n            const { checkedItems } = extraData\\n            const { checkedNodes } = checkedInfo\\n            const defaultCheckedKeys = checkedNodes\\n              .filter(item => !item.children || !item.children.length)\\n              .map(item => item.key)\\n            this.setState({\\n              checkedItems,\\n              defaultCheckedKeys,\\n            })\\n          }}\\n          getTreeData={() => {\\n            return fetch(\\'./\\').then(() => {\\n              return [\\n                {\\n                  id: \\'0-0\\',\\n                  name: \\'0-0\\',\\n                  children: [\\n                    {\\n                      id: \\'0-0-1\\',\\n                      name: \\'0-0-1\\',\\n                    },\\n                  ],\\n                },\\n                {\\n                  id: \\'0-1\\',\\n                  name: \\'0-1\\',\\n                  children: [\\n                    {\\n                      id: \\'0-1-1\\',\\n                      name: \\'0-1-1\\',\\n                    },\\n                    {\\n                      id: \\'0-1-2\\',\\n                      name: \\'0-1-2\\',\\n                    },\\n                  ],\\n                },\\n              ]\\n            })\\n          }}\\n        />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      TreeCurd,\n      EditType,\n      Button,\n      Input,\n      Form,\n      Space,\n      message,\n      FormUtil\n    }} __codesandbox={``} mdxType=\"Playground\">\n      {class Demo extends React.Component {\n        constructor(props) {\n          super(props);\n          this.formRef = React.createRef();\n          this.state = {\n            checkedItems: [],\n            defaultCheckedKeys: []\n          };\n        }\n\n        render() {\n          return <TreeCurd getKey='id' deleteFunction={ids => message.info(ids)} checkable editEnable={false} defaultCheckedKeys={this.state.defaultCheckedKeys} onCheck={(extraData, checkedInfo) => {\n            const {\n              checkedItems\n            } = extraData;\n            const {\n              checkedNodes\n            } = checkedInfo;\n            const defaultCheckedKeys = checkedNodes.filter(item => !item.children || !item.children.length).map(item => item.key);\n            this.setState({\n              checkedItems,\n              defaultCheckedKeys\n            });\n          }} getTreeData={() => {\n            return fetch('./').then(() => {\n              return [{\n                id: \"0-0\",\n                name: \"0-0\",\n                children: [{\n                  id: \"0-0-1\",\n                  name: \"0-0-1\"\n                }]\n              }, {\n                id: \"0-1\",\n                name: \"0-1\",\n                children: [{\n                  id: \"0-1-1\",\n                  name: \"0-1-1\"\n                }, {\n                  id: \"0-1-2\",\n                  name: \"0-1-2\"\n                }]\n              }];\n            });\n          }} mdxType=\"TreeCurd\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"自定义结点props-1\"\n    }}>{`自定义结点props`}</h2>\n    <p>{`name='0-0'的  style.color = 'red'`}</p>\n    <Playground __position={3} __code={'class Demo extends React.Component {\\n    constructor(props) {\\n      super(props)\\n      this.formRef = React.createRef()\\n    }\\n    render() {\\n      return (\\n        <TreeCurd\\n          getKey=\\\"id\\\"\\n          showSearch\\n          deleteFunction={ids => message.info(ids)}\\n          getTreeData={() => {\\n            return fetch(\\'./\\').then(() => {\\n              return [\\n                {\\n                  id: \\'0-0\\',\\n                  name: \\'0-0\\',\\n                  children: [\\n                    {\\n                      id: \\'0-0-1\\',\\n                      name: \\'0-0-1\\',\\n                    },\\n                  ],\\n                },\\n                {\\n                  id: \\'0-1\\',\\n                  name: \\'0-1\\',\\n                  children: [\\n                    {\\n                      id: \\'0-1-1\\',\\n                      name: \\'0-1-1\\',\\n                    },\\n                  ],\\n                },\\n              ]\\n            })\\n          }}\\n          renderEditExtra={extraData => {\\n            const { selectedItems, selectedKeys, type, refresh } = extraData\\n            if (type && this.formRef && this.formRef.current) {\\n              if (type === EditType.ADD) {\\n                this.formRef.current.resetFields()\\n              } else if (type === EditType.EDIT) {\\n                this.formRef.current.setFieldsValue(selectedItems[0])\\n              } else {\\n                this.formRef.current.resetFields()\\n              }\\n            }\\n            return (\\n              <React.Fragment>\\n                <Form ref={this.formRef}>\\n                  {FormUtil.renderFormItems(\\n                    [\\n                      {\\n                        label: \\'类型\\',\\n                        content: (\\n                          <span>\\n                            {type === \\'add\\' ? \\'新增\\' : type ? \\'编辑\\' : \\'\\'}\\n                          </span>\\n                        ),\\n                        name: \\'type\\',\\n                        labelSpan: 3,\\n                        formItemProps: {\\n                          children: \\'\\',\\n                          rules: [\\n                            {\\n                              required: false,\\n                            },\\n                          ],\\n                        },\\n                      },\\n                      {\\n                        label: \\'名称\\',\\n                        content: <Input />,\\n                        name: \\'name\\',\\n                        labelSpan: 3,\\n                        formItemProps: {\\n                          children: \\'\\',\\n                          rules: [\\n                            {\\n                              required: true,\\n                            },\\n                          ],\\n                        },\\n                      },\\n                      {\\n                        label: \\'编码\\',\\n                        content: <Input />,\\n                        name: \\'id\\',\\n                        labelSpan: 3,\\n                        formItemProps: {\\n                          children: \\'\\',\\n                          rules: [\\n                            {\\n                              required: true,\\n                            },\\n                          ],\\n                        },\\n                      },\\n                      {\\n                        labelSpan: 3,\\n                        content: (\\n                          <div className=\\\"fb-ControlGroup\\\">\\n                            <Space>\\n                              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\">\\n                                确定\\n                              </Button>\\n                              <Button onClick={refresh}>重置</Button>\\n                            </Space>\\n                          </div>\\n                        ),\\n                      },\\n                    ],\\n                    1,\\n                  )}\\n                </Form>\\n              </React.Fragment>\\n            )\\n          }}\\n          getNodeProps={node => {\\n            if (node.name === \\'0-0\\') {\\n              return {\\n                style: {\\n                  color: \\'red\\',\\n                },\\n              }\\n            }\\n          }}\\n        />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      TreeCurd,\n      EditType,\n      Button,\n      Input,\n      Form,\n      Space,\n      message,\n      FormUtil\n    }} __codesandbox={`N4IgZglgNgpgziAXKCA7AJjAHgOgBYAuAtlEqAMYD2qBMNSIAPOhAG4AEE6AvADogAnSpQL8AfIwD0LVmJABfADQg0mXACsEyEFRp0CDSQCojvVO3YAVPBDjsAwpUwBlAIYYARpSzs8rux4wdOyuAK4ElESuBBDkrlBQAJ7sAOZ0MALRMOjsoXBoKWYWAAZUmHDu6F5YGcU47ACSYOyJlKEA5AIw7OShAhBtdniUAO7sBH4Evq4ADjPp6IotbT3uRT14MOQA1uxtU20C7OiU5EMZMIi-BAQzcIiSkikQE6EeOFREkmXwldXfTl-nm8GTM6yay1C7Gw836dHI3XcyTgBAEoRSKVgdhGLzw4xsdgqwKwSxmsH83UytkR5lscFCMHW1FSuLe9UQAEozEZJGYIEQZpQBFMAEowVzkKZgIREdidcWS9oAbj5AqFooVBAAIgB5ACy7GlkTlXQlBAAtCciMrVYLhQ5IoLUPpDTK5ThJNhXALYDbUGYxWbdXqcF0MBkABTrZhsMTrCyMPAAZjEjjVzponDVwuy7BxEx6gKJVRBAkQUmTcfMFnYjBmYgjDSmUWSztzrnQLBi1Hi7BmQju40oqRgUxe7DDmH6qBSeZgCQ5Unr8draadLskVYT0ljijMJ16RH0ODSBAAorAjzQAEKJBroCOdYQEdpc1AcpUKZRen0wHCaMgdGoWh6EQFRsymYB2AABSgVxEhSIRQgwJZoIHOx5FdY12gPAAvP1-TtKZ2ncAh0B3FFJFI9APjgOACIgqwuhgew-kWdgoLPLtLESeZ2Ewo1ZXaD04AEchJEsZjWIEcjJKCaT0AYoiOPYa9wgiVAlgaVAZnCJYADEhSIJZnBmCUYCWI86NcNJ-KwoTqKU9V2EMgQiAAVRiKB7PdSRRPE8JoDgSRXI8rynPtQNJR8-UzXaMFUF0FFjlOXDnAIRIsXYbgOPWKIBGeVArnaAAGdgkxmLB2j3aszM7ApioAFkq9gADZKuq9YwGA_TvWgRJiv4ZxDgRB1MBgoR-Es6hKDgMyEU66tupoZwIFwy52AARkamr5ASpKpgAQTmbL2AjKDyBsKB0DDfiOWysQzujGR2BRTKYG4YA8PS964HkLca2AS7oBu4IADIwfGXiYEoZpgeu27uCRuUwGQyUBlQdp2AAfg2EGwwje6rnh0HUD26spBkKs3zMGFnMwMAwigKZCYep6KeO5dqwsYBWe4R7gBXCxyDguj2C1GAiGHbAQPQOwooIHA12oF1Be5mtheoFE0UlIUI37Sg7nutWNdN17QlhfX0LfM2NYmWwcG6tyxWaHKFY-U1aBdwmhZrcnbYnOgp1Zk2A8Dgg-nMKN1YDxg5JYtjfYD08AGkYESPgVHQfgk9tuBhhGZxxTEvBc7NzBYFofS0e7VBPq4Ox-fYKyKjSHA0G6iMG45f2w4109461aJXE-vmBbL22ugjgRzDAUdLsfD1XxwCY6AjMfcpjvuaynyP2AAbQnvvQ-3sOuGKkrzRKxbT771BvQ20qr5v2-A5JsMrkPrfX41k-f4D8-cpL6X02i_f-Ad75Hgvlfc0oCargNtkoI-28AC68CEH8XQQgv-CDAFPzgcgu-D9oEEO_j_d-dBP6EO3jgjBFg8EgNgWAuhNZIGP0YaQlhfssEYLQdQs2SCyF9xQfwu61D5C91PpODIXEXhniwKiEewAZaZCHgQVwbNaF9wOipOA84ti0HQE2SWcAlh6NgJKbIadEimKhvMJYXRpTwDxJhHKKjXBqNcKIiAzQIwZT4hDfEDsnZEBduwQJ9s4COyMi7D4fQwwEGNqI-hvj_HdCRjlWRBAeLzBwIdLUWoklCO3pE6JzsYBgDiQIBJoZ4Cjn0hAeccsfbFIDphecejOCpOhtlZGWScl_jPFqBolgil0NKSE2JvRqnHj0QQBpTS4AADV4gMgjOYgx2RjFEDgPvEqKCbbgPaVATpWjb4TJiRUqpNSuhzIWddOALSEGSNvi8qRo497RwQYwd2-lMgpCvAQAG3zQqBzAJ9C55SwD_WSabYAoVPLQFqeGAQoVtmPNhWbL-XDf6YrDnBQIUBiqAG8fQA0erMJxYWPQNArhfMpabRgc13DAvpb_NJvScokU7FjXG7RAANpoAPI0sZXHZbywAaP6AET44Vcp2hvPpVIJlqAWWUo5DwylbDippIpTigl85TLuCuEmNVOKQnbLQobe4m9WUawoUVGVxrKVoixFQ1pLCzmsq6AAR1CBALo6AriMxORZPFp9BHWprHw11_8w30pjZS91GDdVErlIAWBVAAPntqrhugQIECuIwbSukpibgdSwjVco2GZpYUm_VdqjUhttqa2gRBzV3CuAmuhtriqVq4U6-ALrw24qjSwr1Pq_UirRMGodzyS1cMjeGuNOKF1cPbeApNxUxWAEAPbtGDs36DzQW8I7Bi31rNmW9oXBt0IOrWZWtM6MGNsli2y1K6EGdvtSeyeoRnUHw_QHF9w6YDet9dkcdDI71cKXfSud1rIN0Ngxg_9r9r0GvKuB8Bu6aXswHbWF6It_BwAAHIP0zmADw5pHA0CEFAAA4khGY4hf220YPqhEyqB2MDUjcZkaTM79n5K4AQiR-DXBIAMzO9IPBEBeAxqdLDAB2HoALO1GOx0kJxjSbHw0cfUsyag9goCxG2J9Rxty8D_UALOJgA7fykGp6gGn5WSBYzAOzXDKaxmU-wVVjH4P_2g1wzaaG-49zxVIUKzmw5SF-f8wFYWzaHNDXK5Oo4COAifZ9VAgJNHeN8elzAOA2EcqAc_MZ4Dd4zytRgt6sA231qoFAIUxU_WXrDt55roiEuIPaxrTcE84umzlXK0r5hGASylkellEjoySE5tTMwX4QD-QklJNii35JsRXnALAgEMMGDAoRZyUEbOaUaDpPS7BTJoDsoJOUjkVSoD2_aKCnjkvjQEm6To5BzSoiCJIfTHhJBoFoAIRmC1bv3Y1GaJYUFlYZgIEsBWz3uivewqaRUoPGIUcgG5Q7MUcAel0Jjogh3JAY99YT7TmM0fKQaND_QT6ccegBxkYH8BJDU8dCrGgT6IpHRoOgRF3krvCQ9IFE5U3ef8-575eOCkcBYnordswOi8N0TYY3QOQGuiPmV3AVXr4FeJS1pBM7xdLp2Rygegg-u6b2joKEWU_Semh3yVqU6XLFLoKGSM132QXgvy1GefSh13IABlLCu8WuTPkeggfmUaNLti6Ushx3HtWOrHYGrsC8JQckqBbsWDCBEeRN70DQQE3uzPwgc95_GMxTxVxLD7xQdXmElQrHp0tUiRv1eNmWPQNYy17sFaWBll39YPfDHovr6P6sl0tjbDbzYq4nem_rFnzsLZTbLUN5X9WPRAnLorKgAyK42sCjV7SVcB38xbuR7u9H5ncelsyXkYo5P5XjCmG5kYdggBIBMAGvKgAQUGACdDoACFu8-Ni8YPIY--ive_eVwg-mow-Ci0-FgH-kBv-gBoBgADqaAB2xpAbyLvjARPpvlPjvqgSYOgYAFiaP-IBwB4BcA-Bq-mw6-fe7eS-qAiQKBR6FBX-7A1BwBuBjBM-zB8-RiJBVg0-6waBvB7AgAiBaAAFSoAL7xgAbU6ACABkIRYGniwDOFcFnlXglOQZ_jWN_oAOxKfKGhYKJmtK90TcrAlAXA-uhh6BgAsyaAA68mShYWktjJftxNDDfglNIewN_oAHo6gA5AZFBGHf4AACjOMeo0IyT-Je6EER7AURMsQcdgwAbO6YtO6E_s0RTaZIWQVgERBBsRD-CRq2MkT6b-6RGAdg2R64nO6E7-PBxh7AgAV4EKaACScoAOAWgAY9EWGpzpzeFnRdxNr142GPSn4zj3QAA-r0qIZ-Bh3BRhFg3-XR3RwB6aQxo4lgLwsAox68LwkskxbM8OgI8xix04KQjhqx6BmxuBgACtrAGABjaYABAqYRKagAaEaACgAZsS8UAR8bsQQPYFdKTEceMacVYFMRIQcuwAsTMbcSsYEesb_oALRygAe2qADAMRYbpiIUcSuO4nXo_lUegC_pkMnjwmvqIdpN1NVlvDSdkAjpak9oCFwRYDGrCXYQ4SiW0WiYAKo6gAAPo4l4moBF6VBHEt7hisGL7sAIFmhIEECN7cn2HoB3GolBFyEgGAC92oAGV6FhOI6AEwoxqAdugQAgGp_JWpgA9GaABkKjaYAABygAVHL2mAD3ypKiAbIYoIABt5gAJdGABccqiAyBYT7uePfB4IcboZXuKLnnyWsVqbIYAADmgA8DqAAbWQaV_gQRYFJqgAABIwAQApCECmnmkZBWkJnf6yGABuGYABcJbhgAXMqADpXoAMfKIBgA7BaADw-imp4VJMBPoHpvhkRkeKMUiRWegZKnWY2a2R2d2aGV2BRjmoOXRMOTAKOUsTOOObwW4VOa4c2W2V2T2VmUyDMKCaLHADqKueuTcVue0dQbufubOUecYdmRsHPsuYRg_Necsf6NWJqd_kxEEIACN-gAb3IdGABkeiAWEb2UEE-qMTqB4OoAYreWicAYALJKgA37byEOAiHVDsCACwmj_oAGIWFhNJrgkZa50Z2esZKFWpgA7cF_6yGAAJdoIcedWAPLXsPLSnviXIfgyN-bMWzOalJnonHI3mILRd_u6YADgmgARL4WH5yjBFz754CjF6E0XxnoGAAESoACZpwBFhFco4MA1ciUtcRxDc8BmoOAQ-I-8JTcwl1IjASIElmlvBmxbhFh0iAgFJrghJ6sxJXFpJCcz-CilJlgYgPCDMTMBAYoKKtKAV6iVwlRwV5JoVrgyesJFxmA6CmVmoCOklnRPRkqHlbFFgXlWSPlUpaVJJyVCkPlGV5xeVgIBV_pwptBQBBlFS0VEpMp_eoxy-LVfpP-6J7VnVjMX6oJIhC-cA_VHBkh7FSWKW6E5lExMJbMbJmABVhV3R1BIBJVL56wXlYJc-lV8V1VgVtVbE9V4VuVZo-VZgt-5Rse8c2kgOzOmR6w-8BsMwq5J-G5KQKC7BiQ_hv5gR3-LpbpgAp3ICpaWACcpoAKfmXpERKRUR2ugFKVKNdRcsHENONA-a8e1R6EVJQVCkietAyeYg-RqRhRcEtAJR5gUBiU556NCkcc0ICiGR6Nr1TO5kcAj0WNdguNBA-NiRNR4VWkBN6AZNMAFN5WKIWQSVkt0tb-OUf8WhGegaeiPCBelAPVJeZemGwZk6dsnFiVB8vm7Nxe01n8FtTJsplqje1JU1YhJiNtPC4-1t5t7tRBG-rtXtK4PFB-qyj8zCF-7AV-f4_ugeIelg6C8gdxnwTR2oXAeobQNAIcK4pSI68A2SptrghM1et-FgfGrAxRxmzip0G8f8WdgGDIKIg8w8hMK8mwqA68sJtCpSFs6AWQRcFixBJiBdK48gH46w8dKxJdxRXdPdPtLtOyld7dK4OiUEHt9tZuQSUS8ttA1emsqAyUK9k-cJp0HJVKyUUEX2MAnia9pSm9MA2969J4o46Kt494jy59niZiM9_eH9fdvtOyI96s19o40t50vs-9m-PCw9hdCd7OMOWoXA7kMw3dtAVsMArAT6itotRNN15WKSZ0_YqDT6OAUVE1x1LB_e7AAAhMjKUt9VEsQ8zKQ6If3sVnbASLUt6jnQ3eooPerL3EXX2P0KXXTaeD5ZfTlFXYvYbipHbV_W-Sweit_ZsvbYo73go-wOrTOEsOyq4vfTfXfYNjgzWDI-3sanbQo6A5_SYxYz_bPaYr7BoykMauXfnCKmw843gMamkhA1A-PYI5PYg1kIw7_WrhGGY6gPSdI87SyVcBtTAI3ndJlurEvXI0w-3lfWw3o5I7vVMGY-IdvkfWQUY1I2fXnekw7JkwA2w6eE_XeM0m_cPEsMYzYo087eiv_aw-U0A-osg77GcrkyYsapBhI2QjoglRojlKUiI-ddw-07bD4mdDQ-hDgPiXPiw7bIsxass6gIwxGGMy03PlsuE5QLMwIr7AurM2Pb-cXX43TXMsHpQOnjOBGA41RTnms4AwQMA1BA43dIXb42wMUaeAjmCfjGvCcUQGcX_Mk6eCCwjMEJyraljDoxs3cPox8mVmkrDCOJNaC-YBknKEiTypwE2vvDC-CWGCguwFcGS7i1CUQBc_80I90NU02tYnS5C1k6fdi9Yq7hemU1ErQ2i9POYJi80MMckPi-0ISzjMS5LKS6ONYpS9Swq-nHSwy1cwIwC3TdnfXaU-I14X9TcQverAY86GMA5XohGP4IkIlIHHANnqwOkinmbMk4HXgHxYjqdNfd07fb7NC3sXnUsOK0sPQ-eFgFbco8cF1SQ87eQ8i2w4K77B8_c48ykH4hOic0U9k3a6dK4CMK4OOBxUEJ4usibu68HZmxYMmw89oWm5rTAJW0epIOwAxa1UKfpVvJXJba3vbYawUPEzlMfZoaOCk9NQU3fbgxGLcuEpDLcrLnQCkBMGszalIzljAGVDlLcnsoUy61I7al61U4tZgLC6TBGGuyVI25O_u4EravOzOEu4Y7u9m-AQew7Cy5LGy-e5ezWNKZgKvXwK6qG3rWO4EkB-Gz2_3ne4u3iI9GVLjGBxG-Q5_OATu31mc77PMxGKG0E_bcu0Y7G2kzlNhwRzYhO_xCsR0xvV01kHSmbAmvU2bbcner-9NXek03Y2QvBsM33Lcg6zAI-HrrnJBpm5A6PXcRPcI4_Zvs_djfq3naQUsBZfKVZTZcgWgq9DPQfdvsayu9m1BOK7y-7tiye4jHKIi_yzgIm-rE7GdF2xAKdCVEqJwLWDXsW8PFBxME5xAAANTed4c6Lgtet537wQCoc73JQvsTOHsEDbJsvguNtK7kvwv31AuAgmdgtNqNs2fPMjvqAOdOd5eMCcBywed4AFe-d4eTuRfIwNz7zqDwkJpgMmKWd5B4DptufqIhcHJkecnodbyYe2qVcpdScmIyePK2qKdywqP91_1kcvJ8Pic3PdDUC90GKV0r1wHKdmjWWIG2U6c1gfPAO9O5wbdWNkI6162l4JIBrxBa25xh2nc2Izsac2OQewD3t4i4wR04Ce5h4-EvADI4BR1B6h6DPGrcfrNsNT20CreqOb48MCI8IXOLdavLfingcYCV0se9tbeSg7eKl7eJOUc4BzJHdbxnLY9f1nPg_7dmyYcotRLUB61DdVsJtLNM8Y8PiU_t7fv9ZI8-MasSdo-MOV2L0kcD4qe7dqdO0HNGJHMMkutRNFgxPDwI7H1clE8HcZPUc9Pk-5zsdg--wQ9myd0BO0A4foqhOtNHONvnMC_rBC9RvjXMyxVTg6innbJY_TOuAYNknXViC08n1G6Pe2IG-WEV06NjN33JOGVVw1wYz7M7DkWwAWdWcawGO0c1g_JWV_I2TRa5xaZcYivQy8b9D5RCYgB7DbP6Y7CjywmHc-vnR2IbTffO53QwrFKCoF-qbk52bAAh_Pch-lfsCwfPeZ9myMAk5Y7k7IJSzd1QCLn6CfT_oxAEBVZyiACb8c6W4YALBybpgAYAlNY705q0qiKMo3oxa2yKaACBkef-4Ise9Mv4WHVmWCaNkEi_9LpQqhf4AKfRwBgA-P9n8_IF_ahJ5ldQTZXUumagATk-jWtbWxvbeJh1j7GV4-1AFnrbAC6ycUmyfboFQxyjIQGYaAXMLjHY5UsXuSjfvD1zDh5sC2UwZASZXRjUAu4csb9gHHcYI9XkyCCAX3G6xkIgsW8CLDnyiz6AWUyPcem8Br6BwUUhMSyndQyxQtim9jGtgUE8aBtfY3PZpr7Au6c8ru-gUxuL30Gy9zGW8EPsaia47JPG0MCBq-w3o-to-igreMG19gDwDixtU2DSzhaaQk2fZalGeSHIPxjUYZRfjQA_KrljUhsPwXREvIBC_WIhUITEK3jn0n0hgpPhRWNRGkCwOUAAEwlQSoxqXMgWSLKEBToSYXIU4yDgyI0q5QlFBVSqG-wjqIhHymYILjKUS4xqVLpgGSHqCuwZ4CMinwmYTprBUXB2GnxrBdsaSdOVWpcw1gDcRCOAyhsjAIEVIiB6AfziIUmGPt8Oc-HAaBjcFmwVmOwVxg7AOHbAS0BvM5nfX4bhcpg8cDYbQm0HF5dBNAcIagFh65p76K3Igi8L1pHDGe6PYvIEM56sdfYuOD4OsPQjGpQRSQiEUPTuJlV0WUcX2DGA4Da5VymcSWjJlji4ZzyaIoGOeVVyPgIhwQl8EsCJHnlohR4HuGFmUQ9C-hjIV1LjHKppVqEjIiod5TSp-JouojRuqqnvqhtXeGQd3jF0y7UJfhRDaNi7zZFCjtknIt9qOG5EzNesAcK4GaQSDtZXMsgAvtiP8FHhM459BSMSOEyVYPowAKCAUMLLFkpgEiMLMiJ6A4jiMeI_DASPaD6j-yNAaqK5xYhujIhn5SkZhGNFP8MhLiDvqfH74tCy2Cw_AeGEgDOgcggScfuFhegBjTRzcATIVGvAiAIgELdgDkP4ghif4zGMtrCn0AZBDssKfEu4DSCfQnWeKBvjR2XplsPWVwP8OogKijgcApdI_IjiWAbwa6TifOITCVGcDZMvA1-BqMv78DkEzGGYGgGoRzQ0Ad-FIJ9FEQM9xRzvMNohzSZzEFiq44jrL3Ia4x62ZAhxuImQSX8eYh0cXF5GRSYB44yeBMX3AY6uAAsNYW4TCNkxOCPxexVwS-IsAeDSYv47Fgji6FDp-Bp8KQOdiVRTjtRK5B0drmdE0liRHoxCfaL9HniOIZFCipGNyDRiVhz3BoSdWZGyZWRKKRhj5VlFRIpmiiEthyCHF9wVRX6KAJ1iz47hNRxSccRPFtGoi4J-Ih-I8naBBDvRHowSb4PiFoTkEwAcqj0LSr4S2RtQxRBRIfphtqJPIsCeFlYl2YOJAgjSSuHVa35rcdAiUTcMSK3Y5sC2EXMFARTXiCAG2LbN6IYBg4VIIoUYJdjew3ZbQzkRwFAEhwOgoAdOJHA5F5w_YIAf2WrJLjRRNofJEUx9C0QCnXYgpv2SQCEhChGRtkkuBWDFBRwvhKczkBoNFKICX1BcuOf7Pfl5qs58pniP0IrmZpWToArRSsuwEABMdoAGXzQABYRgAVWVAAnhnoEoiZkTILKAfREBg8tgKYB1NwJMV0C7RXqQJm9DP87c2zNOlMEADoSlgUAAw__6QDJZCepfU2aaG2DzkU9UN6dgIAHnrZ0h1M6kgFeigAP29_SgAA2VAAFK4gEVpClbprECkFTh8pGKazqlKbTDSUQSVCqcPEdqSMj8RABachHeFmkiAFpU6FkMipGT9phKGtKdFajwz1xAAdUyAzAa0pZaGRkByqGNMOFDQaX9KmDbjKGJMkaaVzw6mtGJlwijkHyd7RVkZ2QxqEejmlgzHAEMuEYzKEAjBn0Q4dRFABrQMS8ZlpZ_gLMVSiyLSTnQabILx5ZVEc8TeQAO3Np31Hg7AQAFX6gAeudzpK4bLnZ3y7OciulMlEKVy84VdNhAXJtKdFNnKlQuPM1As2wYoulzpt0ygoAEQdJaatMAAY8oAAlFQAOV-gAObk0ygABiVAAcvIBlfYGszaPUHBYk8b00c5tlkLjlNpZcB0qAMP0eitRcYt0x0oABdTJaYAAh_rIY1EACQ_4ACx_0NjWnsYjtFUp0eOYqjI5EzFUQ3TDvHKTTPdRWsrIgOnMJQFYpW_1LGIEg7kZys5bUdAfXNZlUDjkpyCeFPKZkTUa0M8vrmbAXl6hogeAHALmQjClyzEN6f-knPYCABsJUABfeoNKPkMV1GGch6SAUABeXoABfU32X7PungtAAfdEWYQCgAHgVVpgAKnMP5q0wAJhKgATgscC1cm9H_hdLvFAAQAnfzVpkNOTIAF35QAJ_agABXyj5gAaPlAAQZpVyjJNaG0ptDhmLzmYiMw6e4G4CtRVpgAGADAAyvpoVbAR0nKAAA4lggCuheCxAJJpFUOUQhUYFaiSAmFfrKRshjxbsAN5EwbeWgAfE5idoucUeUjKOl4CcJhA2MRPFxjyKyFGrZUWIs3mhg06D4LDgjIznIzv84C9wPdGbatzjUjbDWVgsAA55udMACQ5kmiAUfyk0XkwANj_dpQBatI_mwwwAcyLyfAqQUdTAAwoqAACXxtJoKQCQi7NuC3QYqR3F2eUYl5KfROcRgWM2EF5JSXZ5_Jp0YANMNNjxKlmGS2YFkuzz5LClMw3xBoqgBtym0hDJJd5FVqvQb0VwERfxDm7Qgg0mw-hA0pKWZKMgXk5ZmAACUjscoIiubgzKdnsAP5gAUMVAAndq3znpW8DWf7MAD-8q_LTmlLsZN6VaUfMABuioAEJrAMqG0xmzAa5qy5tvYsAC_Cf_IsxAKrgHRQABVKgAQujAA6d6wy2Z5oa-QorWD9cal2yrGcjKUVLCYx2QepTFM2Y7LylmchefHJ2XLyzm3SzpEgKMnnLdl5i3pT3MIYwqhl2eBOffyI7orgVN6LpR0m6BnJil0KwZQIGGULzS57AH5ZMr661ypQP0yWKdFVFQBHZXSM6PHO2xDcdEtDK4PlI2EIUkKePfDEWVboJo10PcvufODvRlp45bCO9L2ktTxyNVd6TsQyBbS_UFVuqmAPqofgIkFi7QI1dulBHUq7gd6a1WnMGkgTtESXO1NypLSictFRSwFZLA-DeiGgcAfKegMGmnR3YIsFWBeElj6BpFMwtOdthCDyxJeZoCNYCjQwSqDEOAaVSkFbq0MexAq70fGtx6KwFYya_QByEs7Ww70vPFFZSonjBqcojAfKRxFBG0N_owAPNb4PkAhYOVRAFypx1ZVXKT5p82rLEuSi1Z8lJ3G9CWkGmDNeVGshijApAJ8yj5fshioACfdQABragACnUQCSZQAHAqLpPmatPsU78t1q0v4oqkACjETv0ADQcnQtqxAK-Up8l0myonCjBm5viPmVEne7QchufM06J-v3ifrh-PyzaGF3I6erJ2FDP9eTL5krwRA8QZGd51aX39Hopc39S5JaURAhZIs9gHkIlk21OlucIDbpAHF8zbe0y19SMDg3Yajp3nHKE3PqGjBfVJyFrgONqwicGZGsnWYepalZSO26fBEZRqiRRAZg68PmQ4lGDaQ1AgfeEcKywxMZnJYwcAkZkk3hgsA-Yv9LBtqzCbZg68WrI02zxSbsAMmyeIJujUMovJ7AZTUDEM1qb_RN6T6LVkJVkx0JPMJzYNOYkawpAXkicVQM5JqSJ-kgRTWxhE7qsx8r08gO9IyDaR9MqAT6RGDtkAzu1niFUoTN8TEzu1pMs1RTMy1Uzv1D7WhLTISD0zPVBjO2dvN010tFOamkzRnwL75SJ41m1QNgGYlJp64acpNMxLYTtafVbCZiRqp629yNVzE4APap9WOq8iucake2pzTqiUpbkbZCFsuF6SEoBk4hVMFqk8rZsSgebGJABDhNScROKfmTiL7rZNs2gbbA5MYgHZycSwVOvP1cnYR3Jd2RiArB8lC04cTVF7JlM1CS5GiHOAgHTiKkM5SpCIYKP9phxc4cp9oYSMTmgGHbyc87OiFVINzZt4JfE_9bXWAxa5eJVkQTr-SerxFjth2aWuVheYV5qK7gEGoTu6Bs4Dt0_IvnTgFqNAhadOUOP-XYByY_SgABCNAA-Uq7rVpgAM8jAAi8ogFAA0XIgUxSx2o4qqV5IasOd9pLnSAUACdpoAFWbdaYGUACc-k2UABueoAEZXe6YAHYjH_IAEujQAEAMkBB4j0UAAxWYAEHowAL-KWBQAN4ZgAFfjMSE0SII5XUrMpVpQZCdIADfTVaa1MABcnlzosKdiuAWQGXUJRlBe6YyzKAqoAD4zYPSAQiUgkS1NAI4uTu93vhGqcgzaq5XaKABIY0AB1KYACg5EAoAHDTQAOranhGWAJWRLy7rS3-exZsv9IgFtddu5XZ2VWmAAUOUAAA6df02I17VpbpTZYABNraCqVWbhOB4gxI0Yn_E1JoltdvRQABkZQsRmnbFcF9tNynG60svqbKLKN9r5Y_uXiRIIlC191asJc1vxg1OdfpUvaUWqn4YHQ9Ok7RpHZqyxBaMDfQPmmJ3k5khLO-HQzo0jS1nWQfHWBEAEBWwLUSVf_YzutiGN6QlsWhpm29bFFVaSg1NjdyDTeNR64gyMm9K8oyDL98gzlkbm4lHgzEGUFPvGxGHoQhWnyJEYqn16oSTR6OqyI-HgMaRkJbBgLabGTHGj2sumGvoZmAClIRYBmPMpUFgACA5UffSZqOHS6t1-D24RVKIL-aC8ludoqQzIYyC5s4ANrSLQgOSZQC39qfBgyuDs5wBjtts27r609V1jkG3zZQToRrwMhfmK4WwLYZyg0DxwpSCPUg345oHtenzRvi4ewOGh7Dnh9WO3JsPAHZQgSMwwTjw7JHScHA3rtfpR5Mt2AgRmjms2SZ5G6adBgVpYdiO-IijDbTYQY0qMZG7IFK6o4JtKShtD8ke5Bhxuv2MtiiLR-IG0eCNXALWMtHPeAdk17wzWHukSvx145QBHWmvXTlyzn5z781JR8tRajI73b4gvqt_SAzISr91-ixhfvmtxgHHiRK8VwWQPaC783SgAIwN8KlabbFcBONHGZ98_U43GuKjj6rjtx1aYAHfornfaUADnfoAFu_StNQB1DbBrCcx0zfaxmP8cjavPEtLpncAIhk0CAs2NMcdYJb7DCJs5qFs0MO9tD_4gmAUeKbqNXDs4FYxU3mNG4RGl4PQeMBlgWG1jXh3xLScjU0AaZgmtk4CmebkmOjAmuTQmML4f7u6M4fQ8WVmhTAHGn0BxhprhS0AFE2W9oLpVlRIie-RfDQ_gbJirbw29MIya_oJyHZTJO2hbDTvB2s6lmNkuyb4Icmg7adFpi1PVPQKHlSKbBhvQVTmWAAVAK7IvT3ooxd2PYGcDOAW0GQGIPABBq0xdT9oUNkAZyLNFmTqAMyXtosli4yI_OM7daZzRXblIUEN4UsHjiPbApZESXFBDfGOm4pJEBKSFMkDn0Sz4sVXhlgrNiRPszEYKX9hp3pTNQPkxWYWbf5xR9caNS8Wma8hOneCoC8aWfPHwgEIhGMOAEtNanbSZpsoJBq4GGh9BRo40xc_1N-XzgGBtcdgIACijY6Y6U6mAAbeMABGxtzuT016QCjuo9XYp34ALAFmyiIOlBuJPJ1ir5XSIQci2b03p5AT2DADeFCjZzbNZnQqUlBKkGwK4Fc2ubEgbRt8PCJNHuYxgrVoSoyPPZKARw8IjVKF6gGhezEYWm4EF7JDLByryyCACONLWdFgsjRugoHYeHBYRDUzGjcm2i-ub_AibjikUzgCZtGNlZzNhYvujgBAvMgmtcGt8wUEJiYQjVn0XC6gPMC4x5LplDGGqzIHgs5Tf6ZCwpZlbaWVLTA-LupabTMSIJRBES6eQxh2Zbe_JneIJq4L8MOdLU2Qpbt4LTTtz7F-C-wE3OuWdpsoaEY6cACbfrIRAK0NVp2Cz4X3S3OzSDODFcAj_Kho2kviaaVaYAH05BKy6Ud1RXZQLgtft0AYp7GYA8VyGoldCLppUr6V50plZ8tLnjOLqltn_ieIRL5zo-4q0lfKvFWMrWBLKz0EAvASWiZ8gK6dLXYhXki0-785IL_ORbpEd4sPMzucqZ8PLCIBTpnWYhwV68q198f3BVYDQxi4LM4k3CRJXFz9nKC9Dwhyvr9uL6F26lhcuIX7jr5aB-MwiJOUJdrq1Ii49G053X_qruRFtSV6tLULUBF_a49FibkXC1-PSUBnrJnsBuV1FrDoxbov-cpGT4mwbLmEAzB44COaRYtb2HuDtrJac67ja2s4tPBZw_650M2umxG2BjOOMxCbW45_LdwTCE-IhR51MIm4ErQKbGN0ytTBJ1HosWiBvS6shsTG4CDAsc16iIQDgtBYAbyc4SZ17a7SnZZrUDr_1I699ZOvu4VwhNpW3tZVuPRFZ6tm4q7grQK2SbpMXW29dhKfXESGtszi6uYQAXxQtAPq4DdpR633r9Z9RNhfWAcgVe3t9kpSwWJgq8Jf8Axk-Iq2ibAuTcWhIl1xbZR7u0MLFs9bxbIxB5NxIlnSwLVIgOQ8rc2xSzIEp21WZHHRJF2b7J3trA86VrjCzv-ApbiQXO-KyVbctVW8XEu8jfOMAcA43cwm1XaHkytLrsoOuznbzv7FcrlLOu4bcLvfjcrxdkdQcFXgCANhTtrIK7cHAkDybxq9CGpYYnFb57drCav7dcBUWWl4BLRj-PYCgiRAmwJe7FPfVnRBu2K25BNTBHx3hhX69G6LcwDmaJuE8T8X3EJt3oU7bHTe06ttjkat4BjZ-8zGW2aH9JUZwyeuPYBDm-cXkY08oAWyS0VsKVJHVoAoD2SwIOASWuViDFXBNouQgAKTV5lmp5YkYY3yiFRzQXgLjNmJyGVQ76j0IwIgHSwEAIwiAUWBaBJh4cGHaAc0P0EtFkOSo7DoelqYsArxEidDv-CwDmhwQdrYAWAFgB5nyP5I-a2hKQ_Ki5DpHvDBmTgBEk5pNh6j7AGQ62ic3wN5MJM-JDNPlTkt7nK0xdoIfgQcz8pL9J60FzUQ2zSUoyHWbFWxSYo_jxKclPyl1mezTZ37frjv16yGaZRO040EBnqJRz7RavYAFbrCwmwgb1fWbi81JwrwWukWEk0_pr7Q4akLN72AR-6fQ8dIMF6m9DU5ZTqVWmPmLMgCl5R8oUo3pcZMswvWiToWdTrpyytafcq6dvL3lFu3goACwEwABx6q0wAFfKji66TXsABUmpQVWnJ6d-gAC0VA9g-j-ePq_llPjFfT6WeWUGdalFlYzv-R_Mmc9Pp9iK85zDbLKWkrn3-c6YABHIwBZ5R8czV4CPjop_cV4KAlv5UFUIkerOz5hTcIBG0vbdl7xRp9Rqk1SOR32N7qnDU_KSNYtToFr-gAAnlAASAkBXQoOAbZDi7uAWEJtbtlyN2rSUfOqUOae0jaXym-KLMfuhkIHp36AAseT5RnzHSgAIR0Qk4LahTaU2XbZAANOaABquNIp-qA13atSvHrjLanfya2mM3lJcfqJ0Hu28SPjgR1F84db-w7Lg8zP6AGASsBI9jlDjKOiiO1tALFpgDmhLHmjh6ttuUDzRtgNkP8JoGoCmvQIIAUOPwDYT8Arg_AH4MWGqAZBzQP4MkIyBADoJ-AjrAQPkGoAhv2A_AEqDgEzclQpo6wfgOUAAsQALLqbpAOm5ACHRXohEFPjG5T6YAyQlARILmDyAFBA4Zoc0OG7-Clhc31YfgFEFnGlv-AzWjQAwXjd5uQAdbioYlEaQjuFeNYfN6lDTf8AAAeinKTA4BNo3bjWPwGoiLuQAS7xqDgBTmNRN3c7wQJqF3ebRWoOALACe4sD8Bmz59Xd0u7Xcpytpo79WGG9x3wAn3r7nAK1FvdlusploSIBe6vc3uQAWp-QGZM7e4A9XKQf8Pa0TPuObTYEQWCABppZAQ3YbwC2I81Dmgyl_AKDxInkBAA`} mdxType=\"Playground\">\n      {class Demo extends React.Component {\n        constructor(props) {\n          super(props);\n          this.formRef = React.createRef();\n        }\n\n        render() {\n          return <TreeCurd getKey='id' showSearch deleteFunction={ids => message.info(ids)} getTreeData={() => {\n            return fetch('./').then(() => {\n              return [{\n                id: \"0-0\",\n                name: \"0-0\",\n                children: [{\n                  id: \"0-0-1\",\n                  name: \"0-0-1\"\n                }]\n              }, {\n                id: \"0-1\",\n                name: \"0-1\",\n                children: [{\n                  id: \"0-1-1\",\n                  name: \"0-1-1\"\n                }]\n              }];\n            });\n          }} renderEditExtra={extraData => {\n            const {\n              selectedItems,\n              selectedKeys,\n              type,\n              refresh\n            } = extraData;\n\n            if (type && this.formRef && this.formRef.current) {\n              if (type === EditType.ADD) {\n                this.formRef.current.resetFields();\n              } else if (type === EditType.EDIT) {\n                this.formRef.current.setFieldsValue(selectedItems[0]);\n              } else {\n                this.formRef.current.resetFields();\n              }\n            }\n\n            return <React.Fragment>\n                <Form ref={this.formRef} mdxType=\"Form\">\n                  {FormUtil.renderFormItems([{\n                  label: '类型',\n                  content: <span>{type === 'add' ? '新增' : type ? '编辑' : ''}</span>,\n                  name: 'type',\n                  labelSpan: 3,\n                  formItemProps: {\n                    children: '',\n                    rules: [{\n                      required: false\n                    }]\n                  }\n                }, {\n                  label: '名称',\n                  content: <Input mdxType=\"Input\" />,\n                  name: 'name',\n                  labelSpan: 3,\n                  formItemProps: {\n                    children: '',\n                    rules: [{\n                      required: true\n                    }]\n                  }\n                }, {\n                  label: '编码',\n                  content: <Input mdxType=\"Input\" />,\n                  name: 'id',\n                  labelSpan: 3,\n                  formItemProps: {\n                    children: '',\n                    rules: [{\n                      required: true\n                    }]\n                  }\n                }, {\n                  labelSpan: 3,\n                  content: <div className=\"fb-ControlGroup\">\n                            <Space mdxType=\"Space\">\n                              <Button type=\"primary\" htmlType=\"submit\" mdxType=\"Button\">\n                                确定\n                              </Button>\n                              <Button onClick={refresh} mdxType=\"Button\">重置</Button>\n                            </Space>\n                          </div>\n                }], 1)}\n                </Form>\n              </React.Fragment>;\n          }} getNodeProps={node => {\n            if (node.name === '0-0') {\n              return {\n                style: {\n                  color: 'red'\n                }\n              };\n            }\n          }} mdxType=\"TreeCurd\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"自定义获取子列表的方法\"\n    }}>{`自定义获取子列表的方法`}</h2>\n    <p>{`子列表名称为：childrenCustom`}</p>\n    <Playground __position={4} __code={'class Demo extends React.Component {\\n    constructor(props) {\\n      super(props)\\n      this.formRef = React.createRef()\\n    }\\n    render() {\\n      return (\\n        <TreeCurd\\n          getKey=\\\"id\\\"\\n          showSearch\\n          getChildren=\\\"childrenCustom\\\"\\n          deleteFunction={ids => message.info(ids)}\\n          getTreeData={() => {\\n            return fetch(\\'./\\').then(() => {\\n              return [\\n                {\\n                  id: \\'0-0\\',\\n                  name: \\'0-0\\',\\n                  childrenCustom: [\\n                    {\\n                      id: \\'0-0-1\\',\\n                      name: \\'0-0-1\\',\\n                    },\\n                  ],\\n                },\\n                {\\n                  id: \\'0-1\\',\\n                  name: \\'0-1\\',\\n                  childrenCustom: [\\n                    {\\n                      id: \\'0-1-1\\',\\n                      name: \\'0-1-1\\',\\n                    },\\n                  ],\\n                },\\n              ]\\n            })\\n          }}\\n          renderEditExtra={extraData => {\\n            const { selectedItems, selectedKeys, type, refresh } = extraData\\n            if (type && this.formRef && this.formRef.current) {\\n              if (type === EditType.ADD) {\\n                this.formRef.current.resetFields()\\n              } else if (type === EditType.EDIT) {\\n                this.formRef.current.setFieldsValue(selectedItems[0])\\n              } else {\\n                this.formRef.current.resetFields()\\n              }\\n            }\\n            return (\\n              <React.Fragment>\\n                <Form ref={this.formRef}>\\n                  {FormUtil.renderFormItems(\\n                    [\\n                      {\\n                        label: \\'类型\\',\\n                        content: (\\n                          <span>\\n                            {type === \\'add\\' ? \\'新增\\' : type ? \\'编辑\\' : \\'\\'}\\n                          </span>\\n                        ),\\n                        name: \\'type\\',\\n                        labelSpan: 3,\\n                        formItemProps: {\\n                          children: \\'\\',\\n                          rules: [\\n                            {\\n                              required: false,\\n                            },\\n                          ],\\n                        },\\n                      },\\n                      {\\n                        label: \\'名称\\',\\n                        content: <Input />,\\n                        name: \\'name\\',\\n                        labelSpan: 3,\\n                        formItemProps: {\\n                          children: \\'\\',\\n                          rules: [\\n                            {\\n                              required: true,\\n                            },\\n                          ],\\n                        },\\n                      },\\n                      {\\n                        label: \\'编码\\',\\n                        content: <Input />,\\n                        name: \\'id\\',\\n                        labelSpan: 3,\\n                        formItemProps: {\\n                          children: \\'\\',\\n                          rules: [\\n                            {\\n                              required: true,\\n                            },\\n                          ],\\n                        },\\n                      },\\n                      {\\n                        labelSpan: 3,\\n                        content: (\\n                          <div className=\\\"fb-ControlGroup\\\">\\n                            <Space>\\n                              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\">\\n                                确定\\n                              </Button>\\n                              <Button onClick={refresh}>重置</Button>\\n                            </Space>\\n                          </div>\\n                        ),\\n                      },\\n                    ],\\n                    1,\\n                  )}\\n                </Form>\\n              </React.Fragment>\\n            )\\n          }}\\n        />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      TreeCurd,\n      EditType,\n      Button,\n      Input,\n      Form,\n      Space,\n      message,\n      FormUtil\n    }} __codesandbox={``} mdxType=\"Playground\">\n      {class Demo extends React.Component {\n        constructor(props) {\n          super(props);\n          this.formRef = React.createRef();\n        }\n\n        render() {\n          return <TreeCurd getKey='id' showSearch getChildren='childrenCustom' deleteFunction={ids => message.info(ids)} getTreeData={() => {\n            return fetch('./').then(() => {\n              return [{\n                id: \"0-0\",\n                name: \"0-0\",\n                childrenCustom: [{\n                  id: \"0-0-1\",\n                  name: \"0-0-1\"\n                }]\n              }, {\n                id: \"0-1\",\n                name: \"0-1\",\n                childrenCustom: [{\n                  id: \"0-1-1\",\n                  name: \"0-1-1\"\n                }]\n              }];\n            });\n          }} renderEditExtra={extraData => {\n            const {\n              selectedItems,\n              selectedKeys,\n              type,\n              refresh\n            } = extraData;\n\n            if (type && this.formRef && this.formRef.current) {\n              if (type === EditType.ADD) {\n                this.formRef.current.resetFields();\n              } else if (type === EditType.EDIT) {\n                this.formRef.current.setFieldsValue(selectedItems[0]);\n              } else {\n                this.formRef.current.resetFields();\n              }\n            }\n\n            return <React.Fragment>\n                <Form ref={this.formRef} mdxType=\"Form\">\n                  {FormUtil.renderFormItems([{\n                  label: '类型',\n                  content: <span>{type === 'add' ? '新增' : type ? '编辑' : ''}</span>,\n                  name: 'type',\n                  labelSpan: 3,\n                  formItemProps: {\n                    children: '',\n                    rules: [{\n                      required: false\n                    }]\n                  }\n                }, {\n                  label: '名称',\n                  content: <Input mdxType=\"Input\" />,\n                  name: 'name',\n                  labelSpan: 3,\n                  formItemProps: {\n                    children: '',\n                    rules: [{\n                      required: true\n                    }]\n                  }\n                }, {\n                  label: '编码',\n                  content: <Input mdxType=\"Input\" />,\n                  name: 'id',\n                  labelSpan: 3,\n                  formItemProps: {\n                    children: '',\n                    rules: [{\n                      required: true\n                    }]\n                  }\n                }, {\n                  labelSpan: 3,\n                  content: <div className=\"fb-ControlGroup\">\n                            <Space mdxType=\"Space\">\n                              <Button type=\"primary\" htmlType=\"submit\" mdxType=\"Button\">\n                                确定\n                              </Button>\n                              <Button onClick={refresh} mdxType=\"Button\">重置</Button>\n                            </Space>\n                          </div>\n                }], 1)}\n                </Form>\n              </React.Fragment>;\n          }} mdxType=\"TreeCurd\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"扩展操作区\"\n    }}>{`扩展操作区`}</h2>\n    <p>{`自定义一个按钮`}</p>\n    <Playground __position={5} __code={'class Demo extends React.Component {\\n    constructor(props) {\\n      super(props)\\n      this.formRef = React.createRef()\\n      this.state = {\\n        expandedKeys: [],\\n      }\\n    }\\n    render() {\\n      return (\\n        <TreeCurd\\n          getKey=\\\"id\\\"\\n          deleteFunction={ids => message.info(ids)}\\n          defaultExpandedKeys={this.state.expandedKeys}\\n          onExpand={expandedKeys => {\\n            this.setState({\\n              expandedKeys,\\n            })\\n          }}\\n          getTreeData={() => {\\n            return fetch(\\'./\\').then(() => {\\n              return [\\n                {\\n                  id: \\'0-0\\',\\n                  name: \\'0-0\\',\\n                  children: [\\n                    {\\n                      id: \\'0-0-1\\',\\n                      name: \\'0-0-1\\',\\n                    },\\n                  ],\\n                },\\n                {\\n                  id: \\'0-1\\',\\n                  name: \\'0-1\\',\\n                  children: [\\n                    {\\n                      id: \\'0-1-1\\',\\n                      name: \\'0-1-1\\',\\n                    },\\n                  ],\\n                },\\n              ]\\n            })\\n          }}\\n          renderEditExtra={extraData => {\\n            const { selectedItems, selectedKeys, type, refresh } = extraData\\n            if (type && this.formRef && this.formRef.current) {\\n              if (type === EditType.ADD) {\\n                this.formRef.current.resetFields()\\n              } else if (type === EditType.EDIT) {\\n                this.formRef.current.setFieldsValue(selectedItems[0])\\n              } else {\\n                this.formRef.current.resetFields()\\n              }\\n            }\\n            return (\\n              <React.Fragment>\\n                <Form ref={this.formRef}>\\n                  {FormUtil.renderFormItems(\\n                    [\\n                      {\\n                        label: \\'类型\\',\\n                        content: (\\n                          <span>\\n                            {type === \\'add\\' ? \\'新增\\' : type ? \\'编辑\\' : \\'\\'}\\n                          </span>\\n                        ),\\n                        name: \\'type\\',\\n                        labelSpan: 3,\\n                        formItemProps: {\\n                          children: \\'\\',\\n                          rules: [\\n                            {\\n                              required: false,\\n                            },\\n                          ],\\n                        },\\n                      },\\n                      {\\n                        label: \\'名称\\',\\n                        content: <Input />,\\n                        name: \\'name\\',\\n                        labelSpan: 3,\\n                        formItemProps: {\\n                          children: \\'\\',\\n                          rules: [\\n                            {\\n                              required: true,\\n                            },\\n                          ],\\n                        },\\n                      },\\n                      {\\n                        label: \\'编码\\',\\n                        content: <Input />,\\n                        name: \\'id\\',\\n                        labelSpan: 3,\\n                        formItemProps: {\\n                          children: \\'\\',\\n                          rules: [\\n                            {\\n                              required: true,\\n                            },\\n                          ],\\n                        },\\n                      },\\n                      {\\n                        labelSpan: 3,\\n                        content: (\\n                          <div className=\\\"fb-ControlGroup\\\">\\n                            <Space>\\n                              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\">\\n                                确定\\n                              </Button>\\n                              <Button onClick={refresh}>重置</Button>\\n                            </Space>\\n                          </div>\\n                        ),\\n                      },\\n                    ],\\n                    1,\\n                  )}\\n                </Form>\\n              </React.Fragment>\\n            )\\n          }}\\n          renderExtra={(extraData, defaultRender) => {\\n            return (\\n              <React.Fragment>\\n                {defaultRender(extraData)}\\n                <Button>自定义按钮</Button>\\n              </React.Fragment>\\n            )\\n          }}\\n        />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      TreeCurd,\n      EditType,\n      Button,\n      Input,\n      Form,\n      Space,\n      message,\n      FormUtil\n    }} __codesandbox={``} mdxType=\"Playground\">\n      {class Demo extends React.Component {\n        constructor(props) {\n          super(props);\n          this.formRef = React.createRef();\n          this.state = {\n            expandedKeys: []\n          };\n        }\n\n        render() {\n          return <TreeCurd getKey='id' deleteFunction={ids => message.info(ids)} defaultExpandedKeys={this.state.expandedKeys} onExpand={expandedKeys => {\n            this.setState({\n              expandedKeys\n            });\n          }} getTreeData={() => {\n            return fetch('./').then(() => {\n              return [{\n                id: \"0-0\",\n                name: \"0-0\",\n                children: [{\n                  id: \"0-0-1\",\n                  name: \"0-0-1\"\n                }]\n              }, {\n                id: \"0-1\",\n                name: \"0-1\",\n                children: [{\n                  id: \"0-1-1\",\n                  name: \"0-1-1\"\n                }]\n              }];\n            });\n          }} renderEditExtra={extraData => {\n            const {\n              selectedItems,\n              selectedKeys,\n              type,\n              refresh\n            } = extraData;\n\n            if (type && this.formRef && this.formRef.current) {\n              if (type === EditType.ADD) {\n                this.formRef.current.resetFields();\n              } else if (type === EditType.EDIT) {\n                this.formRef.current.setFieldsValue(selectedItems[0]);\n              } else {\n                this.formRef.current.resetFields();\n              }\n            }\n\n            return <React.Fragment>\n                <Form ref={this.formRef} mdxType=\"Form\">\n                  {FormUtil.renderFormItems([{\n                  label: '类型',\n                  content: <span>{type === 'add' ? '新增' : type ? '编辑' : ''}</span>,\n                  name: 'type',\n                  labelSpan: 3,\n                  formItemProps: {\n                    children: '',\n                    rules: [{\n                      required: false\n                    }]\n                  }\n                }, {\n                  label: '名称',\n                  content: <Input mdxType=\"Input\" />,\n                  name: 'name',\n                  labelSpan: 3,\n                  formItemProps: {\n                    children: '',\n                    rules: [{\n                      required: true\n                    }]\n                  }\n                }, {\n                  label: '编码',\n                  content: <Input mdxType=\"Input\" />,\n                  name: 'id',\n                  labelSpan: 3,\n                  formItemProps: {\n                    children: '',\n                    rules: [{\n                      required: true\n                    }]\n                  }\n                }, {\n                  labelSpan: 3,\n                  content: <div className=\"fb-ControlGroup\">\n                            <Space mdxType=\"Space\">\n                              <Button type=\"primary\" htmlType=\"submit\" mdxType=\"Button\">\n                                确定\n                              </Button>\n                              <Button onClick={refresh} mdxType=\"Button\">重置</Button>\n                            </Space>\n                          </div>\n                }], 1)}\n                </Form>\n              </React.Fragment>;\n          }} renderExtra={(extraData, defaultRender) => {\n            return <React.Fragment>\n            {defaultRender(extraData)}\n            <Button mdxType=\"Button\">自定义按钮</Button>\n          </React.Fragment>;\n          }} mdxType=\"TreeCurd\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"属性\"\n    }}>{`属性`}</h2>\n    <Props of={TreeCurd} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"]}]}