{"remainingRequest":"/Users/xujunjie/Documents/git/projectComponent/node_modules/thread-loader/dist/cjs.js??ref--11-1!/Users/xujunjie/Documents/git/projectComponent/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--11-2!/Users/xujunjie/Documents/git/projectComponent/node_modules/source-map-loader/index.js!/Users/xujunjie/Documents/git/projectComponent/src/utils/TreeControl.ts","dependencies":[{"path":"/Users/xujunjie/Documents/git/projectComponent/src/utils/TreeControl.ts","mtime":1608989725151},{"path":"/Users/xujunjie/Documents/git/projectComponent/node_modules/cache-loader/dist/cjs.js","mtime":1609062632110},{"path":"/Users/xujunjie/Documents/git/projectComponent/node_modules/thread-loader/dist/cjs.js","mtime":1609062632658},{"path":"/Users/xujunjie/Documents/git/projectComponent/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1609062558293},{"path":"/Users/xujunjie/Documents/git/projectComponent/node_modules/source-map-loader/index.js","mtime":1609062632650}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/xujunjie/Documents/git/projectComponent/src/utils/TreeControl.ts"],"names":["TreeControl","dataGetter","childrenGetter","childrenCreater","Error","tree","equal","_filterInner","parentNode","result","i","length","item","push","filterChildren","getChildren","_createChildren","list","equalParent","innerListTree","parent","children","equalFunction","chain","_searchChainInner","searchParent","child","index","node","search","realIndex","Math","max","min","_removeInner","splice","forEachFunction","_forEachInner","forEach","mapFunction","_mapInner","newNode","childResult","unshift","Function"],"mappings":"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","sourcesContent":["type equalFunctionType<T> = (node: T, index: number, parentNode: T | null) => boolean;\n\n/**\n * 一个通用的树结构操作器，对源数据的结构没有要求\n * @author yinhunfeixue\n * @email yinhunfeixue@163.com\n */\nclass TreeControl<T extends { [key: string]: any }> {\n  private dataGetter: string | ((item: T) => any);\n  private childrenGetter: string | ((item: T) => T[]);\n  private childrenCreater: string | ((item: T, children?: T[]) => T[]);\n\n  /**\n   * 创建树控制器实例\n   * @param {String|Function} dataGetter 获取结点值的方法，为字符串或(node)=>object的函数\n   * @param {String|Function} childrenGetter 获取结点子结点列表的方法，为字符串或(node)=>object的函数\n   */\n  constructor(\n    dataGetter: string | ((item: T) => any) = 'value',\n    childrenGetter: string | ((item: T) => any[]) = 'children',\n    childrenCreater: string | ((item: T, children?: T[]) => any[]) = 'children',\n  ) {\n    if (!dataGetter) {\n      throw new Error('dataGetter need value');\n    } else if (!childrenGetter) {\n      throw new Error('childrenGetter need value');\n    } else {\n      this.dataGetter = dataGetter;\n      this.childrenGetter = childrenGetter;\n      this.childrenCreater = childrenCreater;\n    }\n  }\n\n  /**\n   * 过滤树\n   * @param tree 树\n   * @param equal 是否匹配的方法，返回true，表示结果中包含此结点及基子结点\n   */\n  public filter(tree: T[], equal: equalFunctionType<T>): T[] {\n    return this._filterInner(tree, equal, null);\n  }\n\n  private _filterInner(tree: T[], equal: equalFunctionType<T>, parentNode: T | null): T[] {\n    if (!tree) {\n      return [];\n    }\n    const result: T[] = [];\n    // 循环tree\n    // 对于每一项，如果equal返回true，添加到结果列表中；否则，递归子列表，如果递归的子列表>=0，添加到结果列表\n    for (let i = 0; i < tree.length; i++) {\n      const item = { ...(tree[i] as any) };\n      if (equal(item, i, parentNode)) {\n        result.push(item);\n      } else {\n        const filterChildren = this._filterInner(this.getChildren(item), equal, item);\n        if (filterChildren && filterChildren.length > 0) {\n          result.push(item);\n          this._createChildren(item, filterChildren);\n        }\n      }\n    }\n    return result;\n  }\n\n  /**\n   * 一维数组转换成树结构\n   * @param list\n   */\n  public listToTree(list: T[], equalParent: (node: T, parentNode: T | null) => boolean): T[] {\n    return this.innerListTree(list, equalParent, null);\n  }\n\n  private innerListTree(\n    list: T[],\n    equalParent: (node: T, parentNode: T | null) => boolean,\n    parent: T | null,\n  ): T[] {\n    if (!list) {\n      return [];\n    }\n    // 循环list，针对每一项item：使用equalParent判断parent是否是item的父结点\n    // 如果是，则添加到结果列表；并以item为父结点，查找子列表\n    // 否则，不处理\n    const result: T[] = [];\n    for (let i = 0; i < list.length; i++) {\n      const item = list[i];\n      if (equalParent(item, parent)) {\n        result.push(item);\n        const children = this.innerListTree(list, equalParent, item);\n        if (children && children.length) {\n          this._createChildren(item, children);\n        }\n      }\n    }\n    return result;\n  }\n\n  /**\n   * 搜索满足指定条件的第一个结点\n   * @param 树结点的数据\n   * @param 匹配函数\n   */\n  search(tree: T[], equalFunction: equalFunctionType<T>) {\n    let chain = this._searchChainInner(tree, equalFunction);\n    return chain && chain.length ? chain[chain.length - 1] : null;\n  }\n\n  /**\n   * 搜索满足指定条件的第一个结点的父结点\n   * @param tree 树\n   * @param equalFunction 匹配函数，格式为(node, index, parentNode)=>bool\n   */\n  searchParent(tree: T[], equalFunction: equalFunctionType<T>) {\n    let chain = this._searchChainInner(tree, equalFunction);\n    if (chain && chain.length >= 2) {\n      return chain[chain.length - 2];\n    }\n    return null;\n  }\n\n  /**\n   * 获取满足指定条件的第一个结点在父结点子列表中的位置，如果无父结点，或结点不存在，返回-1\n   * @param tree 树\n   * @param equalFunction 匹配函数，格式为(node, index, parentNode)=>bool\n   *\n   * @return {Number} 指定条件的结点所在的位置\n   */\n  getIndex(tree: T[], equalFunction: equalFunctionType<T>) {\n    let parent = this.searchParent(tree, equalFunction);\n    if (parent) {\n      let children = this.getChildren(parent);\n      for (let i = 0; i < children.length; i++) {\n        if (equalFunction(children[i], i, parent)) {\n          return i;\n        }\n      }\n    }\n    return -1;\n  }\n\n  addAt(tree: T[], equalFunction: equalFunctionType<T>, child: T, index = -1) {\n    let node = this.search(tree, equalFunction);\n    if (node) {\n      let children = this.getChildren(node);\n      if (!children) {\n        children = this._createChildren(node);\n      }\n\n      if (children) {\n        let realIndex = Math.max(0, Math.min(children.length, index));\n        children[realIndex] = child;\n      }\n    }\n  }\n\n  remove(tree: T[], equalFunction: equalFunctionType<T>) {\n    this._removeInner(tree, equalFunction);\n  }\n\n  /**\n   *\n   * @param tree\n   * @param equalFunction\n   */\n  _removeInner(tree: T[], equalFunction: equalFunctionType<T>, parent: T | null = null) {\n    if (tree) {\n      //遍历结点\n      for (let i = 0; i < tree.length; i++) {\n        let node = tree[i];\n        //如果当前结点符合被删除的条件，则删除；不符合，则递归子结点\n        if (equalFunction(node, i, parent)) {\n          tree.splice(i, 1);\n          i--;\n        } else {\n          this._removeInner(this.getChildren(node), equalFunction, node);\n        }\n      }\n    }\n  }\n\n  /**\n   * 搜索满足条件的第一个结点，并返回从一级结点到指定结点的数组，第一项是一级结点，最后一项是符合条件的结点\n   * @param tree 树\n   * @param equalFunction 匹配函数\n   */\n  searchChain(tree: T[], equalFunction: equalFunctionType<T>) {\n    return this._searchChainInner(tree, equalFunction);\n  }\n\n  /**\n   * 遍历树结点，并对每个结点执行回调函数\n   * @param {Array} tree 树\n   * @param {Function} forEachFunction 回调函数\n   */\n  forEach(tree: T[], forEachFunction: (node: T, index: number, parentNode: T | null) => void) {\n    this._forEachInner(tree, forEachFunction);\n  }\n\n  /**\n   * 查找所有符合条件的结点，并返回符合条件结点的一维数组\n   * @param tree 树\n   * @param equalFunction 匹配函数\n   */\n  find(tree: T[], equalFunction: equalFunctionType<T>) {\n    let result: T[] = [];\n    this.forEach(tree, (node, i, parent) => {\n      if (equalFunction(node, i, parent)) {\n        result.push(node);\n      }\n    });\n    return result;\n  }\n\n  /**\n   * 计算树的结点总数\n   * @param tree 树\n   */\n  count(tree: T[]) {\n    let result = 0;\n    this.forEach(tree, () => {\n      result++;\n    });\n    return result;\n  }\n\n  /**\n   * 遍历树，并创建和原结构一致的新树。新树的结点为原树结点调用函数处理后的值\n   *\n   * **注意**，新树不会自动创建子结点，需要在mapFunction中，把返回值和参数中的newChildren进行关联，例如result.children = newChildren\n   *\n   * @param tree\n   * @param {*} mapFunction 格式为(node, index, oldParent, newChildren)=>Object\n   */\n  map<W>(\n    tree: T[],\n    mapFunction: (node: T, index: number, oldParent: T | null, newChildren: W[] | null) => W,\n  ) {\n    return this._mapInner(tree, mapFunction);\n  }\n\n  /**\n   *\n   * @param {*} tree\n   * @param {*} mapFunction\n   * @param {*} parent\n   *\n   * @private\n   */\n  _mapInner<W>(\n    tree: T[],\n    mapFunction: (node: T, index: number, oldParent: T | null, newChildren: W[] | null) => W,\n    parent: T | null = null,\n  ) {\n    //循环树结点，并先递归子树，获取用mapFunction创建的新子树\n    //子树递归完成后，用mapFunction对当前结点创建新结点，并放到新树中\n    //把子树放到新结点的子列表中\n    if (tree) {\n      let result = [];\n      for (let i = 0; i < tree.length; i++) {\n        let node = tree[i];\n        let children = this._mapInner(this.getChildren(node), mapFunction, node);\n        let newNode = mapFunction(node, i, parent, children);\n        result.push(newNode);\n      }\n      return result;\n    }\n    return null;\n  }\n\n  /**\n   * 内部用于递归搜索结点链的函数\n   * @param tree 树\n   * @param equalFunction 匹配函数，格式为(node, index, parentNode)=>bool\n   * @param parent 父结点\n   *\n   * @private\n   *\n   * @return {Array} 从根结点当符合条件的结点的数组\n   */\n  private _searchChainInner(\n    tree: T[],\n    equalFunction: equalFunctionType<T>,\n    parent: T | null = null,\n  ): T[] | null {\n    if (tree) {\n      //循环树，如果有结点符合条件，则放到数组中返回\n      //如果结点不符合条件，但是有子结点，则递归子结点，如果从子结点中找到结点，把当前结点放到子结果中，一起返回\n      for (let i = 0; i < tree.length; i++) {\n        let node = tree[i];\n        if (equalFunction(node, i, parent)) {\n          return [node];\n        } else {\n          let children = this.getChildren(node);\n          if (children) {\n            let childResult = this._searchChainInner(children, equalFunction, node);\n            if (childResult) {\n              childResult.unshift(node);\n              return childResult;\n            }\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * 遍历树\n   * @param tree\n   * @param forEachFunction 要对结点进行操作的函数，格式为(node, index, parentNode)=>void\n   * @param parent\n   *\n   * @private\n   */\n  private _forEachInner(\n    tree: T[],\n    forEachFunction: (node: T, index: number, parentNode: T | null) => void,\n    parent = null,\n  ) {\n    if (tree) {\n      //遍历结点，对结点执行操作，并递归子结点\n      for (let i = 0; i < tree.length; i++) {\n        let node = tree[i];\n        forEachFunction(node, i, parent);\n        this._forEachInner(this.getChildren(node), forEachFunction);\n      }\n    }\n    return null;\n  }\n\n  /**\n   * 获取结点的值\n   * @param {*} node\n   */\n  getNodeData(node: T) {\n    if (this.dataGetter instanceof Function) {\n      return this.dataGetter(node);\n    } else {\n      return node[this.dataGetter];\n    }\n  }\n\n  /**\n   * 获取结点的子结点列表\n   * @param {*} node\n   *\n   * @return {Array}\n   */\n  getChildren(node: T) {\n    if (this.childrenGetter instanceof Function) {\n      return this.childrenGetter(node);\n    } else {\n      return node[this.childrenGetter];\n    }\n  }\n\n  _createChildren(node: T, children?: T[]) {\n    if (this.childrenCreater instanceof Function) {\n      return this.childrenCreater(node, children);\n    } else {\n      (node as any)[this.childrenCreater] = children || [];\n      return node[this.childrenCreater];\n    }\n  }\n}\n\nexport default TreeControl;\n"]}]}