{"remainingRequest":"/Users/xujunjie/Documents/git/projectComponent/node_modules/thread-loader/dist/cjs.js??ref--11-1!/Users/xujunjie/Documents/git/projectComponent/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--11-2!/Users/xujunjie/Documents/git/projectComponent/node_modules/source-map-loader/index.js!/Users/xujunjie/Documents/git/projectComponent/src/utils/AntdUtil.tsx","dependencies":[{"path":"/Users/xujunjie/Documents/git/projectComponent/src/utils/AntdUtil.tsx","mtime":1608989771294},{"path":"/Users/xujunjie/Documents/git/projectComponent/node_modules/cache-loader/dist/cjs.js","mtime":1609062632110},{"path":"/Users/xujunjie/Documents/git/projectComponent/node_modules/thread-loader/dist/cjs.js","mtime":1609062632658},{"path":"/Users/xujunjie/Documents/git/projectComponent/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1609062558293},{"path":"/Users/xujunjie/Documents/git/projectComponent/node_modules/source-map-loader/index.js","mtime":1609062632650}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSAiL1VzZXJzL3h1anVuamllL0RvY3VtZW50cy9naXQvcHJvamVjdENvbXBvbmVudC9ub2RlX21vZHVsZXMvYmFiZWwtcHJlc2V0LXJlYWN0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMiI7CmltcG9ydCAiYW50ZC9lcy90cmVlL3N0eWxlL2NzcyI7CmltcG9ydCBfVHJlZSBmcm9tICJhbnRkL2VzL3RyZWUiOwppbXBvcnQgImFudGQvZXMvc2VsZWN0L3N0eWxlL2NzcyI7CmltcG9ydCBfU2VsZWN0IGZyb20gImFudGQvZXMvc2VsZWN0IjsKaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICIvVXNlcnMveHVqdW5qaWUvRG9jdW1lbnRzL2dpdC9wcm9qZWN0Q29tcG9uZW50L25vZGVfbW9kdWxlcy9iYWJlbC1wcmVzZXQtcmVhY3QtYXBwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjayI7CmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAiL1VzZXJzL3h1anVuamllL0RvY3VtZW50cy9naXQvcHJvamVjdENvbXBvbmVudC9ub2RlX21vZHVsZXMvYmFiZWwtcHJlc2V0LXJlYWN0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MiOwp2YXIgX2pzeEZpbGVOYW1lID0gIi9Vc2Vycy94dWp1bmppZS9Eb2N1bWVudHMvZ2l0L3Byb2plY3RDb21wb25lbnQvc3JjL3V0aWxzL0FudGRVdGlsLnRzeCI7CgooZnVuY3Rpb24gKCkgewogIHZhciBlbnRlck1vZHVsZSA9IHR5cGVvZiByZWFjdEhvdExvYWRlckdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyByZWFjdEhvdExvYWRlckdsb2JhbC5lbnRlck1vZHVsZSA6IHVuZGVmaW5lZDsKICBlbnRlck1vZHVsZSAmJiBlbnRlck1vZHVsZShtb2R1bGUpOwp9KSgpOwoKdmFyIF9fc2lnbmF0dXJlX18gPSB0eXBlb2YgcmVhY3RIb3RMb2FkZXJHbG9iYWwgIT09ICd1bmRlZmluZWQnID8gcmVhY3RIb3RMb2FkZXJHbG9iYWxbImRlZmF1bHQiXS5zaWduYXR1cmUgOiBmdW5jdGlvbiAoYSkgewogIHJldHVybiBhOwp9OwoKaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JzsKCnZhciBBbnRkVXRpbCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gQW50ZFV0aWwoKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQW50ZFV0aWwpOwogIH0KCiAgX2NyZWF0ZUNsYXNzKEFudGRVdGlsLCBudWxsLCBbewogICAga2V5OiAiY3JlYXRlU2VsZWN0T3B0aW9ucyIsCgogICAgLyoqCiAgICAgKiDmoLnmja7mlbDmja7mupDliJvlu7pzZWxlY3TnmoRvcHRpb25z5YiX6KGoCiAgICAgKiBAcGFyYW0gZGF0YVNvdXJjZSDmlbDmja7mupAKICAgICAqIEBwYXJhbSBsYWJlbEZ1bmN0aW9uIOaKiuavj+S4gOmhuei9rOaNouaIkOaYvuekuuaWh+Wtl+eahOWHveaVsO+8jOWmguaenOS4jeiuvue9ru+8jOWImeS9v+eUqHRvU3RyaW5nKCkKICAgICAqLwogICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZVNlbGVjdE9wdGlvbnMoZGF0YVNvdXJjZSwgbGFiZWxGdW5jdGlvbiwgdmFsdWVGdW5jdGlvbikgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgaWYgKGRhdGFTb3VyY2UgJiYgZGF0YVNvdXJjZS5sZW5ndGgpIHsKICAgICAgICByZXR1cm4gZGF0YVNvdXJjZS5tYXAoZnVuY3Rpb24gKGl0ZW0sIGkpIHsKICAgICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChfU2VsZWN0Lk9wdGlvbiwgewogICAgICAgICAgICBrZXk6IGkudG9TdHJpbmcoKSwKICAgICAgICAgICAgdmFsdWU6IHZhbHVlRnVuY3Rpb24gPyB2YWx1ZUZ1bmN0aW9uKGl0ZW0pIDogaXRlbSwKICAgICAgICAgICAgX19zZWxmOiBfdGhpcywKICAgICAgICAgICAgX19zb3VyY2U6IHsKICAgICAgICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICAgICAgICAgIGxpbmVOdW1iZXI6IDIwLAogICAgICAgICAgICAgIGNvbHVtbk51bWJlcjogMTEKICAgICAgICAgICAgfQogICAgICAgICAgfSwgbGFiZWxGdW5jdGlvbiA/IGxhYmVsRnVuY3Rpb24oaXRlbSkgOiBpdGVtKTsKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgcmV0dXJuIFtdOwogICAgfQogICAgLyoqCiAgICAgKiDmuLLmn5PmoJEKICAgICAqCiAgICAgKiBAcGFyYW0gZGF0YVNvdXJjZSDmlbDmja7mupAKICAgICAqIEBwYXJhbSB0cmVlUHJvcHMg57uZ5qCR55qEcHJvcHPvvIzkvovlpoJvblNlbGVjdAogICAgICogQHBhcmFtIGdldEtleSDojrflj5ZrZXnlgLzvvIzlj6/ku6XmmK/lsZ7mgKflkI3np7DvvIzkuZ/lj6/ku6XmmK/kuIDkuKrlh73mlbAKICAgICAqIEBwYXJhbSBnZXRUaXRsZSDojrflj5Z0aXRsZeWAvO+8jOWPr+S7peaYr+WxnuaAp+WQjeensO+8jOS5n+WPr+S7peaYr+S4gOS4quWHveaVsAogICAgICogQHBhcmFtIGdldENoaWxkcmVuIOiOt+WPluWtkOWFg+e0oOWIl+ihqO+8jOWPr+S7peaYr+WxnuaAp+WQjeensO+8jOS5n+WPr+S7peaYr+S4gOS4quWHveaVsAogICAgICogQHBhcmFtIGNyZWF0ZU5vZGVQcm9wcyDliJvlu7rnu5nmr4/kuKpub2Rl55qEcHJvcHMKICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJyZW5kZVRyZWUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlVHJlZShkYXRhU291cmNlLCB0cmVlUHJvcHMpIHsKICAgICAgdmFyIGdldEtleSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogJ2lkJzsKICAgICAgdmFyIGdldFRpdGxlID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiAnbmFtZSc7CiAgICAgIHZhciBnZXRDaGlsZHJlbiA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogJ2NoaWxkcmVuJzsKICAgICAgdmFyIGNyZWF0ZU5vZGVQcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiA1ID8gYXJndW1lbnRzWzVdIDogdW5kZWZpbmVkOwoKICAgICAgaWYgKGRhdGFTb3VyY2UpIHsKICAgICAgICB2YXIgdHJlZURhdGEgPSB0aGlzLmxvb3BUcmVlTm9kZShkYXRhU291cmNlLCBnZXRLZXksIGdldFRpdGxlLCBnZXRDaGlsZHJlbiwgY3JlYXRlTm9kZVByb3BzKTsKICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX1RyZWUsIE9iamVjdC5hc3NpZ24oe30sIHRyZWVQcm9wcywgewogICAgICAgICAgdHJlZURhdGE6IHRyZWVEYXRhLAogICAgICAgICAgX19zZWxmOiB0aGlzLAogICAgICAgICAgX19zb3VyY2U6IHsKICAgICAgICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgICAgICAgbGluZU51bWJlcjogNTUsCiAgICAgICAgICAgIGNvbHVtbk51bWJlcjogMTQKICAgICAgICAgIH0KICAgICAgICB9KSk7CiAgICAgIH0KCiAgICAgIHJldHVybiBudWxsOwogICAgfQogIH0sIHsKICAgIGtleTogImxvb3BUcmVlTm9kZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gbG9vcFRyZWVOb2RlKHRyZWVEYXRhKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgdmFyIGdldEtleSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJ2lkJzsKICAgICAgdmFyIGdldFRpdGxlID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAnbmFtZSc7CiAgICAgIHZhciBnZXRDaGlsZHJlbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogJ2NoaWxkcmVuJzsKICAgICAgdmFyIGNyZWF0ZU5vZGVQcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ID8gYXJndW1lbnRzWzRdIDogdW5kZWZpbmVkOwogICAgICByZXR1cm4gdHJlZURhdGEubWFwKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgdmFyIGNoaWxkcmVuID0gdHlwZW9mIGdldENoaWxkcmVuID09PSAnc3RyaW5nJyA/IGl0ZW1bZ2V0Q2hpbGRyZW5dIDogZ2V0Q2hpbGRyZW4oaXRlbSk7CiAgICAgICAgdmFyIGtleSA9IHR5cGVvZiBnZXRLZXkgPT09ICdzdHJpbmcnID8gaXRlbVtnZXRLZXldIDogZ2V0S2V5KGl0ZW0pOwogICAgICAgIHZhciB0aXRsZSA9IHR5cGVvZiBnZXRUaXRsZSA9PT0gJ3N0cmluZycgPyBpdGVtW2dldFRpdGxlXSA6IGdldFRpdGxlKGl0ZW0pOwogICAgICAgIHZhciBvdGhlclByb3BzID0gY3JlYXRlTm9kZVByb3BzID8gY3JlYXRlTm9kZVByb3BzKGl0ZW0pIDogbnVsbDsKCiAgICAgICAgdmFyIHJlc3VsdCA9IF9vYmplY3RTcHJlYWQoewogICAgICAgICAga2V5OiBrZXksCiAgICAgICAgICB0aXRsZTogdGl0bGUKICAgICAgICB9LCBvdGhlclByb3BzKTsKCiAgICAgICAgaWYgKGNoaWxkcmVuKSB7CiAgICAgICAgICByZXN1bHQuY2hpbGRyZW4gPSBfdGhpczIubG9vcFRyZWVOb2RlKGNoaWxkcmVuLCBnZXRLZXksIGdldFRpdGxlLCBnZXRDaGlsZHJlbiwgY3JlYXRlTm9kZVByb3BzKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH0pOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIEFudGRVdGlsOwp9KCk7Cgp2YXIgX2RlZmF1bHQgPSBBbnRkVXRpbDsKZXhwb3J0IGRlZmF1bHQgX2RlZmF1bHQ7CgppZiAodHlwZW9mIEFudGRVdGlsICE9PSAndW5kZWZpbmVkJyAmJiBBbnRkVXRpbCAmJiBBbnRkVXRpbCA9PT0gT2JqZWN0KEFudGRVdGlsKSAmJiBPYmplY3QuaXNFeHRlbnNpYmxlKEFudGRVdGlsKSkgewogIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBbnRkVXRpbCwgJ19fZmlsZW1ldGEnLCB7CiAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgdmFsdWU6IHsKICAgICAgbmFtZTogIkFudGRVdGlsIiwKICAgICAgZmlsZW5hbWU6ICJzcmMvdXRpbHMvQW50ZFV0aWwudHN4IgogICAgfQogIH0pOwp9Cgo7CgooZnVuY3Rpb24gKCkgewogIHZhciByZWFjdEhvdExvYWRlciA9IHR5cGVvZiByZWFjdEhvdExvYWRlckdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyByZWFjdEhvdExvYWRlckdsb2JhbC5kZWZhdWx0IDogdW5kZWZpbmVkOwoKICBpZiAoIXJlYWN0SG90TG9hZGVyKSB7CiAgICByZXR1cm47CiAgfQoKICByZWFjdEhvdExvYWRlci5yZWdpc3RlcihBbnRkVXRpbCwgIkFudGRVdGlsIiwgIi9Vc2Vycy94dWp1bmppZS9Eb2N1bWVudHMvZ2l0L3Byb2plY3RDb21wb25lbnQvc3JjL3V0aWxzL0FudGRVdGlsLnRzeCIpOwogIHJlYWN0SG90TG9hZGVyLnJlZ2lzdGVyKF9kZWZhdWx0LCAiZGVmYXVsdCIsICIvVXNlcnMveHVqdW5qaWUvRG9jdW1lbnRzL2dpdC9wcm9qZWN0Q29tcG9uZW50L3NyYy91dGlscy9BbnRkVXRpbC50c3giKTsKfSkoKTsKCjsKCihmdW5jdGlvbiAoKSB7CiAgdmFyIGxlYXZlTW9kdWxlID0gdHlwZW9mIHJlYWN0SG90TG9hZGVyR2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IHJlYWN0SG90TG9hZGVyR2xvYmFsLmxlYXZlTW9kdWxlIDogdW5kZWZpbmVkOwogIGxlYXZlTW9kdWxlICYmIGxlYXZlTW9kdWxlKG1vZHVsZSk7Cn0pKCk7"},{"version":3,"sources":["/Users/xujunjie/Documents/git/projectComponent/src/utils/AntdUtil.tsx"],"names":["React","AntdUtil","dataSource","labelFunction","valueFunction","length","map","item","i","toString","treeProps","getKey","getTitle","getChildren","createNodeProps","treeData","loopTreeNode","children","key","title","otherProps","result"],"mappings":";;;;;;;;;;;;;;;;;;AAGA,OAAOA,KAAP,MAAiC,OAAjC;;IAEMC,Q;;;;;;;;AACJ;AACF;AACA;AACA;AACA;wCAEIC,U,EACAC,a,EACAC,a,EACW;AAAA;;AACX,UAAIF,UAAU,IAAIA,UAAU,CAACG,MAA7B,EAAqC;AACnC,eAAOH,UAAU,CAACI,GAAX,CAAe,UAACC,IAAD,EAAOC,CAAP,EAAa;AACjC,8BACE,4BAAQ,MAAR;AAAe,YAAA,GAAG,EAAEA,CAAC,CAACC,QAAF,EAApB;AAAkC,YAAA,KAAK,EAAEL,aAAa,GAAGA,aAAa,CAACG,IAAD,CAAhB,GAAyBA,IAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACGJ,aAAa,GAAGA,aAAa,CAACI,IAAD,CAAhB,GAAyBA,IADzC,CADF;AAKD,SANM,CAAP;AAOD;;AACD,aAAO,EAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;8BAEIL,U,EACAQ,S,EAK2B;AAAA,UAJ3BC,MAI2B,uEAJc,IAId;AAAA,UAH3BC,QAG2B,uEAHmB,MAGnB;AAAA,UAF3BC,WAE2B,uEAFgB,UAEhB;AAAA,UAD3BC,eAC2B;;AAC3B,UAAIZ,UAAJ,EAAgB;AACd,YAAMa,QAAQ,GAAG,KAAKC,YAAL,CACfd,UADe,EAEfS,MAFe,EAGfC,QAHe,EAIfC,WAJe,EAKfC,eALe,CAAjB;AAOA,4BAAO,6CAAUJ,SAAV;AAAqB,UAAA,QAAQ,EAAEK,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AACD;;AACD,aAAO,IAAP;AACD;;;iCAGCA,Q,EAKwB;AAAA;;AAAA,UAJxBJ,MAIwB,uEAJiB,IAIjB;AAAA,UAHxBC,QAGwB,uEAHsB,MAGtB;AAAA,UAFxBC,WAEwB,uEAFmB,UAEnB;AAAA,UADxBC,eACwB;AACxB,aAAOC,QAAQ,CAACT,GAAT,CAAa,UAAAC,IAAI,EAAI;AAC1B,YAAMU,QAAQ,GACZ,OAAOJ,WAAP,KAAuB,QAAvB,GAAmCN,IAAD,CAAcM,WAAd,CAAlC,GAA+DA,WAAW,CAACN,IAAD,CAD5E;AAEA,YAAMW,GAAG,GAAG,OAAOP,MAAP,KAAkB,QAAlB,GAA8BJ,IAAD,CAAcI,MAAd,CAA7B,GAAqDA,MAAM,CAACJ,IAAD,CAAvE;AACA,YAAMY,KAAK,GACT,OAAOP,QAAP,KAAoB,QAApB,GAAiCL,IAAD,CAAcK,QAAd,CAAhC,GAAwEA,QAAQ,CAACL,IAAD,CADlF;AAEA,YAAMa,UAAU,GAAGN,eAAe,GAAGA,eAAe,CAACP,IAAD,CAAlB,GAA2B,IAA7D;;AACA,YAAMc,MAAgB;AAAKH,UAAAA,GAAG,EAAHA,GAAL;AAAUC,UAAAA,KAAK,EAALA;AAAV,WAAoBC,UAApB,CAAtB;;AACA,YAAIH,QAAJ,EAAc;AACZI,UAAAA,MAAM,CAACJ,QAAP,GAAkB,MAAI,CAACD,YAAL,CAChBC,QADgB,EAEhBN,MAFgB,EAGhBC,QAHgB,EAIhBC,WAJgB,EAKhBC,eALgB,CAAlB;AAOD;;AACD,eAAOO,MAAP;AACD,OAlBM,CAAP;AAmBD;;;;;;eAGYpB,Q;AAAf;;;;;;;;;;;;;;;;;;;;;;0BAnFMA,Q","sourcesContent":["import { Select, Tree } from 'antd';\nimport { TreeProps } from 'antd/lib/tree';\nimport { DataNode } from 'rc-tree/lib/interface';\nimport React, { ReactNode } from 'react';\n\nclass AntdUtil {\n  /**\n   * 根据数据源创建select的options列表\n   * @param dataSource 数据源\n   * @param labelFunction 把每一项转换成显示文字的函数，如果不设置，则使用toString()\n   */\n  public static createSelectOptions<T extends React.ReactText>(\n    dataSource: T[],\n    labelFunction?: (item: T) => ReactNode,\n    valueFunction?: (item: T) => React.ReactText,\n  ): ReactNode {\n    if (dataSource && dataSource.length) {\n      return dataSource.map((item, i) => {\n        return (\n          <Select.Option key={i.toString()} value={valueFunction ? valueFunction(item) : item}>\n            {labelFunction ? labelFunction(item) : item}\n          </Select.Option>\n        );\n      });\n    }\n    return [];\n  }\n\n  /**\n   * 渲染树\n   *\n   * @param dataSource 数据源\n   * @param treeProps 给树的props，例如onSelect\n   * @param getKey 获取key值，可以是属性名称，也可以是一个函数\n   * @param getTitle 获取title值，可以是属性名称，也可以是一个函数\n   * @param getChildren 获取子元素列表，可以是属性名称，也可以是一个函数\n   * @param createNodeProps 创建给每个node的props\n   */\n  public static rendeTree<T extends any>(\n    dataSource: T[],\n    treeProps?: TreeProps,\n    getKey: ((item: T) => string) | string = 'id',\n    getTitle: ((item: T) => ReactNode) | string = 'name',\n    getChildren: ((item: T) => T[]) | string = 'children',\n    createNodeProps?: (item: T) => DataNode,\n  ): React.ReactElement | null {\n    if (dataSource) {\n      const treeData = this.loopTreeNode(\n        dataSource,\n        getKey,\n        getTitle,\n        getChildren,\n        createNodeProps,\n      );\n      return <Tree {...treeProps} treeData={treeData} />;\n    }\n    return null;\n  }\n\n  private static loopTreeNode<T extends any>(\n    treeData: T[],\n    getKey: ((item: T) => string) | string = 'id',\n    getTitle: ((item: T) => ReactNode) | string = 'name',\n    getChildren: ((item: T) => T[]) | string = 'children',\n    createNodeProps?: (item: T) => DataNode,\n  ): DataNode[] | undefined {\n    return treeData.map(item => {\n      const children =\n        typeof getChildren === 'string' ? (item as any)[getChildren] : getChildren(item);\n      const key = typeof getKey === 'string' ? (item as any)[getKey] : getKey(item);\n      const title =\n        typeof getTitle === 'string' ? ((item as any)[getTitle] as ReactNode) : getTitle(item);\n      const otherProps = createNodeProps ? createNodeProps(item) : null;\n      const result: DataNode = { key, title, ...otherProps };\n      if (children) {\n        result.children = this.loopTreeNode(\n          children,\n          getKey,\n          getTitle,\n          getChildren,\n          createNodeProps,\n        );\n      }\n      return result;\n    });\n  }\n}\n\nexport default AntdUtil;\n"]}]}