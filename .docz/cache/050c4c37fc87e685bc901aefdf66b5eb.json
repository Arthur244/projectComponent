{"remainingRequest":"/Users/xujunjie/Documents/git/projectComponent/node_modules/thread-loader/dist/cjs.js??ref--11-1!/Users/xujunjie/Documents/git/projectComponent/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--11-2!/Users/xujunjie/Documents/git/projectComponent/node_modules/source-map-loader/index.js!/Users/xujunjie/Documents/git/projectComponent/src/TreeCurd/TreeCurd.tsx","dependencies":[{"path":"/Users/xujunjie/Documents/git/projectComponent/src/TreeCurd/TreeCurd.tsx","mtime":1609158887465},{"path":"/Users/xujunjie/Documents/git/projectComponent/node_modules/cache-loader/dist/cjs.js","mtime":1609062632110},{"path":"/Users/xujunjie/Documents/git/projectComponent/node_modules/thread-loader/dist/cjs.js","mtime":1609062632658},{"path":"/Users/xujunjie/Documents/git/projectComponent/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1609062558293},{"path":"/Users/xujunjie/Documents/git/projectComponent/node_modules/source-map-loader/index.js","mtime":1609062632650}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/xujunjie/Documents/git/projectComponent/src/TreeCurd/TreeCurd.tsx"],"names":["React","Component","ConfirmButton","AntdUtil","classnames","require","Search","EditType","TreeCurd","state","loading","autoExpandParent","treeData","expandedKeys","checkedKeys","checkedItems","selectedKeys","selectedItems","searchValue","type","DEFAULT","refresh","requestTreeData","then","updateSelectedItems","getItemsByIds","setState","getExtraData","updateCheckedItems","checkedInfo","extraData","props","onCheck","Promise","resolve","getTreeData","getKey","defaultExpandedKeys","defaultCheckedKeys","setLoading","res","length","node0","children","getNodeChildren","key","getItemKey","ids","getChildren","i","item","j","push","onSelect","EDIT","onExpand","defaultRenderOptItem","deleteFunction","checkable","ADD","title","content","color","undefined","prevProps","getTitle","treeContentClassName","editContentClassName","optClassOName","checkClassName","treeProps","width","minHeight","renderExtra","renderEditExtra","renderCheckExtra","showSearch","getNodeProps","editEnable","checkProps","TreeProps","marginBottom","e","target","value","rendeTree"],"mappings":"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","sourcesContent":["import { Button, Input, Spin } from 'antd';\nimport { DataNode } from 'rc-tree/lib/interface';\nimport React, { Component, ReactNode } from 'react';\nimport ConfirmButton from '../confirmButton/ConfirmButton';\nimport IComponentProps from '../interfaces/IComponentProps';\nimport AntdUtil from '../utils/AntdUtil';\nimport './TreeCurd.less';\n\nconst classnames = require('classnames');\n\nconst { Search } = Input;\n\nexport enum EditType {\n  ADD = 'add',\n  EDIT = 'edit',\n  DEFAULT = '',\n}\n\ninterface ITreeCurdState<T> {\n  loading: boolean;\n  autoExpandParent: boolean;\n  treeData: T[];\n  expandedKeys: any[];\n  selectedKeys: React.ReactText[];\n  selectedItems: T[];\n  checkedKeys: any[];\n  checkedItems: T[];\n  searchValue: string;\n  type: EditType;\n}\n\ninterface ITreeCurdExtra<T> {\n  /**\n   * 选取节点的keys\n   */\n  selectedKeys: React.ReactText[];\n  /**\n   * 选取节点的数据\n   */\n  selectedItems: T[];\n  /**\n   * 多选的节点keys\n   */\n  checkedKeys: any[];\n  /**\n   * 多选节点数据\n   */\n  checkedItems: T[];\n\n  /**\n   *  树加载状态\n   */\n  loading: boolean;\n\n  /**\n   * 刷新\n   */\n  refresh: () => void;\n\n  /**\n   * 操作类型\n   */\n  type?: EditType;\n}\n\n/**\n * 属性\n *\n * @interface ITreeCurdProps\n * @extends {IComponentProps}\n * @template T\n */\ninterface ITreeCurdProps<T> extends IComponentProps {\n  /**\n   * 自定义标识\n   */\n  getKey?: ((item: T) => string) | string;\n\n  /**\n   * 自定义节点名称\n   */\n  getTitle?: ((item: T) => ReactNode) | string;\n\n  /**\n   * 自定义数据子节点集合属性名或者自定义子节点集合\n   */\n  getChildren?: ((item: T) => T[]) | string;\n\n  /**\n   * 选中回调\n   */\n  onCheck?: (\n    extraData: ITreeCurdExtra<T>,\n    checkedInfo: {\n      checkedNodes: DataNode[];\n    },\n  ) => void;\n\n  /**\n   * 展开回调\n   */\n  onExpand?: (expandedKeys: React.ReactText[]) => void;\n\n  /**\n   * 树的宽度\n   */\n  width?: number;\n\n  /**\n   * 是否是一个是否可编辑的树,默认为true\n   */\n  editEnable?: boolean;\n\n  /**\n   * 树最小高度\n   */\n  minHeight?: number;\n\n  /**\n   * 树顶部操作区窗口的样式名\n   */\n  treeContentClassName?: string;\n\n  /**\n   * 编辑顶部操作区窗口的样式名\n   */\n  editContentClassName?: string;\n\n  /**\n   * 操作顶部操作区窗口的样式名\n   */\n  optClassOName?: string;\n\n  /**\n   * 多选顶部操作区窗口的样式名\n   */\n  checkClassName?: string;\n\n  /**\n   *  Tree组件自带的属性\n   */\n  treeProps?: Object;\n\n  /**\n   * 节点前添加 Checkbox 复选框\n   */\n  checkable?: boolean;\n\n  /**\n   * 获取树源数据\n   */\n  getTreeData: (searchValue?: string) => Promise<T[]>;\n\n  /**\n   * 是否可搜索\n   */\n  showSearch?: boolean;\n\n  /**\n   * 删除节点\n   */\n  deleteFunction?: (ids: React.ReactText[]) => Promise<any>;\n\n  /**\n   * 自定义操作\n   */\n  renderExtra?: (\n    extraData: ITreeCurdExtra<T>,\n    defaultRender: (extraData: ITreeCurdExtra<T>) => ReactNode,\n  ) => ReactNode;\n\n  /**\n   * 自定义编辑操作\n   */\n  renderEditExtra?: (extraData: ITreeCurdExtra<T>) => ReactNode;\n\n  /**\n   * 默认展开的节点\n   */\n  defaultExpandedKeys?: any[];\n\n  /**\n   * 默认选中的节点\n   */\n  defaultCheckedKeys?: any[];\n\n  getNodeProps?: (item: T) => DataNode;\n\n  /**\n   *  自定义多选的操作\n   */\n  renderCheckExtra?: (extraData: ITreeCurdExtra<T>) => ReactNode;\n}\n\ninterface TreeInterfaces {\n  [propName: string]: any;\n}\n\n/**\n * 一个可以增删改查的树\n *\n * @class TreeCurd\n * @extends {Component<ITreeCurdProps<T>, ITreeCurdState<T>>}\n * @template T\n */\nclass TreeCurd<T extends TreeInterfaces> extends Component<ITreeCurdProps<T>, ITreeCurdState<T>> {\n  state: ITreeCurdState<T> = {\n    loading: false,\n    autoExpandParent: true,\n    treeData: [],\n    expandedKeys: [],\n    checkedKeys: [],\n    checkedItems: [],\n    selectedKeys: [],\n    selectedItems: [],\n    searchValue: '',\n    type: EditType.DEFAULT,\n  };\n\n  componentDidMount() {\n    this.requestTreeData();\n  }\n\n  private refresh = () => {\n    this.requestTreeData().then(() => {\n      this.updateSelectedItems();\n    });\n  };\n\n  private updateSelectedItems = () => {\n    const { selectedKeys } = this.state;\n    const selectedItems: T[] = [];\n    const { treeData } = this.state;\n    this.getItemsByIds(treeData, selectedKeys, selectedItems);\n    this.setState({\n      selectedItems,\n    });\n  };\n\n  componentDidUpdate(prevProps: ITreeCurdProps<T>) {\n    if (prevProps.defaultCheckedKeys !== this.props.defaultCheckedKeys) {\n      this.requestTreeData();\n    }\n  }\n\n  private getExtraData = () => {\n    const { checkedKeys, checkedItems, selectedKeys, selectedItems, loading, type } = this.state;\n    return {\n      checkedKeys,\n      checkedItems,\n      selectedKeys,\n      selectedItems,\n      loading,\n      refresh: this.refresh,\n      type,\n    };\n  };\n\n  private updateCheckedItems = (checkedInfo: { checkedNodes: DataNode[] }) => {\n    const { checkedKeys } = this.state;\n    const checkedItems: T[] = [];\n    const { treeData } = this.state;\n    this.getItemsByIds(treeData, checkedKeys, checkedItems);\n    this.setState(\n      {\n        checkedItems,\n      },\n      () => {\n        const extraData = this.getExtraData();\n        if (this.props.onCheck) {\n          this.props.onCheck(extraData, checkedInfo);\n        }\n      },\n    );\n  };\n\n  private setLoading(loading: boolean) {\n    this.setState({ loading });\n  }\n\n  private getNodeChildren(item: T) {\n    const { getChildren = 'children' } = this.props;\n    return typeof getChildren === 'string' ? item[getChildren] : getChildren(item);\n  }\n\n  private getItemKey(item: T) {\n    const { getKey = 'id' } = this.props;\n    return typeof getKey === 'string' ? item[getKey] : getKey(item);\n  }\n\n  private requestTreeData = (type?: string) => {\n    return new Promise(async resolve => {\n      const { searchValue } = this.state;\n      const { getTreeData, getKey, defaultExpandedKeys, defaultCheckedKeys } = this.props;\n      this.setLoading(true);\n      const res = await getTreeData(searchValue);\n      this.setLoading(false);\n      // 获取默认展开节点\n      let expandedKeys: string[] = [];\n      let checkedKeys = [];\n      if (res && res.length) {\n        const node0 = res[0];\n        const children = this.getNodeChildren(node0);\n        if (children && children.length) {\n          const key = this.getItemKey(node0);\n          expandedKeys =\n            defaultExpandedKeys && defaultExpandedKeys.length > 0 ? defaultExpandedKeys : [key];\n        }\n      }\n      if (defaultCheckedKeys) {\n        checkedKeys = defaultCheckedKeys;\n      }\n\n      this.setState(\n        {\n          treeData: res,\n          expandedKeys,\n          checkedKeys,\n        },\n        () => {\n          resolve('');\n        },\n      );\n    });\n  };\n\n  private getItemsByIds = (treeData: T[], ids: React.ReactText[], selectedItems: T[]) => {\n    const { getKey = 'id', getChildren = 'children' } = this.props;\n    for (let i = 0; i < treeData.length; i++) {\n      const item = treeData[i];\n      const key = this.getItemKey(item);\n      const children = this.getNodeChildren(item);\n      for (let j = 0; j < ids.length; j++) {\n        if (key === ids[j]) {\n          selectedItems.push(treeData[i]);\n        }\n      }\n      if (children) {\n        this.getItemsByIds(children, ids, selectedItems);\n      }\n    }\n  };\n\n  private onSelect = (selectedKeys: React.ReactText[]) => {\n    this.setState(\n      {\n        selectedKeys,\n        autoExpandParent: false,\n        type: selectedKeys && selectedKeys.length ? EditType.EDIT : EditType.DEFAULT,\n      },\n      () => {\n        this.updateSelectedItems();\n      },\n    );\n  };\n\n  private onExpand = (expandedKeys: React.ReactText[]) => {\n    this.setState(\n      {\n        expandedKeys,\n      },\n      () => {\n        if (this.props.onExpand) {\n          this.props.onExpand(expandedKeys);\n        }\n      },\n    );\n  };\n\n  private onCheck = (\n    checkedKeys: React.ReactText[],\n    checkedInfo: {\n      checkedNodes: DataNode[];\n    },\n  ) => {\n    this.setState(\n      {\n        checkedKeys,\n      },\n      () => {\n        this.updateCheckedItems(checkedInfo);\n      },\n    );\n  };\n\n  private defaultRenderOptItem = (extraData: ITreeCurdExtra<T>) => {\n    const { selectedKeys, checkedKeys, refresh } = extraData;\n    const { deleteFunction, checkable } = this.props;\n    return (\n      <React.Fragment>\n        <Button type=\"primary\" onClick={() => this.setState({ type: EditType.ADD })}>\n          新增\n        </Button>\n        {selectedKeys && selectedKeys.length > 0 && (\n          <ConfirmButton\n            modalContent={{\n              title: '这个操作不可逆',\n              content: (\n                <span>\n                  确定要<span style={{ color: 'red' }}>删除</span>该节点？\n                </span>\n              ),\n            }}\n            onConfirm={async () => {\n              if (deleteFunction) {\n                const ids = checkable !== undefined ? checkedKeys : selectedKeys;\n                await deleteFunction(ids);\n                refresh();\n              }\n            }}\n          />\n        )}\n      </React.Fragment>\n    );\n  };\n\n  public render(): ReactNode {\n    const {\n      loading,\n      treeData,\n      expandedKeys,\n      autoExpandParent,\n      checkedKeys,\n      checkedItems,\n      selectedKeys,\n      selectedItems,\n      type,\n    } = this.state;\n    const {\n      getKey,\n      getTitle,\n      getChildren,\n      treeContentClassName,\n      editContentClassName,\n      optClassOName,\n      checkClassName,\n      treeProps,\n      checkable,\n      width = 200,\n      minHeight = 300,\n      renderExtra,\n      renderEditExtra,\n      renderCheckExtra,\n      showSearch,\n      getNodeProps,\n      editEnable = true,\n    } = this.props;\n    let checkProps = {};\n    if (checkable !== undefined) {\n      checkProps = {\n        checkable: true,\n        onCheck: this.onCheck,\n        checkedKeys,\n      };\n    }\n\n    const TreeProps = {\n      autoExpandParent,\n      onSelect: this.onSelect,\n      onExpand: this.onExpand,\n      expandedKeys,\n      ...checkProps,\n      ...treeProps,\n    };\n\n    return (\n      <div className=\"TreeCurd\">\n        <div className={classnames('optContent', optClassOName)}>\n          {editEnable\n            ? renderExtra\n              ? renderExtra(this.getExtraData(), this.defaultRenderOptItem)\n              : this.defaultRenderOptItem(this.getExtraData())\n            : null}\n        </div>\n        <div className=\"treeCurdContent\" style={{ minHeight }}>\n          <div className={classnames('treeContent', treeContentClassName)} style={{ width }}>\n            {showSearch !== undefined && (\n              <div style={{ marginBottom: 20 }}>\n                <Search\n                  enterButton\n                  onChange={e =>\n                    this.setState({ searchValue: e.target.value }, () => this.refresh())\n                  }\n                />\n              </div>\n            )}\n\n            <Spin\n              spinning={\n                this.props.defaultExpandedKeys || this.props.defaultCheckedKeys ? false : loading\n              }\n            >\n              {AntdUtil.rendeTree<T>(\n                treeData,\n                TreeProps,\n                getKey,\n                getTitle,\n                getChildren,\n                getNodeProps,\n              )}\n            </Spin>\n            <div className={classnames('checkContent', checkClassName)}>\n              {checkable !== undefined && renderCheckExtra\n                ? renderCheckExtra(this.getExtraData())\n                : null}\n            </div>\n          </div>\n          <div className={classnames('editContent', editContentClassName)}>\n            {renderEditExtra && renderEditExtra(this.getExtraData())}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TreeCurd;\n"]}]}